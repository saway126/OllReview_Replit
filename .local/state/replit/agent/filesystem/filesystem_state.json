{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AllReview Platform\n\n## Overview\n\nAllReview Platform is a comprehensive Korean marketing platform that connects advertisers with partners for product promotion and review campaigns. The platform facilitates campaign creation, partner recruitment, sample distribution, and performance tracking through an integrated web application.\n\n## Recent Changes (July 19, 2025)\n\n✓ **Campaign Creation Fixed**: Resolved data type conversion issues in campaign creation API\n✓ **Enhanced Navigation**: Added home/dashboard navigation buttons in header\n✓ **Interactive Homepage Demo**: Implemented working preview sections for each user role\n✓ **Smooth User Experience**: Added scroll-to-demo functionality and proper routing\n✓ **Database Integration**: Successfully connected PostgreSQL with working test accounts\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe application uses a modern React-based frontend with the following architectural decisions:\n\n**Framework Choice**: React with TypeScript for type safety and better developer experience\n- **Rationale**: React provides excellent component reusability and ecosystem support\n- **Alternative considered**: Vue.js - React chosen for larger community and better TypeScript integration\n\n**Routing**: Wouter for lightweight client-side routing\n- **Rationale**: Smaller bundle size compared to React Router while providing essential routing features\n- **Trade-off**: Fewer advanced features but sufficient for the application's needs\n\n**Styling**: Tailwind CSS with shadcn/ui component library\n- **Rationale**: Utility-first CSS framework with pre-built accessible components\n- **Benefits**: Rapid development, consistent design system, and responsive design out of the box\n\n**State Management**: TanStack Query (React Query) for server state management\n- **Rationale**: Excellent caching, background updates, and API synchronization\n- **Alternative considered**: Redux - React Query chosen for simpler API integration\n\n### Backend Architecture\nThe backend follows a REST API pattern with Express.js:\n\n**Framework**: Express.js with TypeScript\n- **Rationale**: Mature, lightweight, and excellent middleware ecosystem\n- **Benefits**: Fast development, extensive documentation, and Node.js ecosystem compatibility\n\n**Session Management**: Express-session with secure configuration\n- **Rationale**: Server-side session storage for security\n- **Trade-off**: Requires server memory but provides better security than JWT for this use case\n\n**Authentication**: bcrypt for password hashing with role-based access control\n- **Rationale**: Industry-standard password hashing with salt\n- **Security consideration**: Implements role-based permissions (admin, advertiser, partner)\n\n### Data Storage Solutions\n**Primary Database**: PostgreSQL with Drizzle ORM\n- **Rationale**: ACID compliance, excellent performance for complex queries, and strong typing with Drizzle\n- **Alternative considered**: MongoDB - PostgreSQL chosen for relational data requirements\n- **Benefits**: Type-safe database queries, migration support, and excellent performance\n\n**Database Provider**: Neon (PostgreSQL-compatible)\n- **Rationale**: Serverless PostgreSQL with automatic scaling\n- **Benefits**: No infrastructure management, pay-per-use pricing model\n\n## Key Components\n\n### User Management System\n- **Multi-role authentication**: Admin, Advertiser, Partner roles with different capabilities\n- **Secure session management**: Server-side sessions with proper expiration\n- **Profile management**: Company information, contact details, and role-specific data\n\n### Campaign Management\n- **Campaign lifecycle**: Draft → Recruiting → Active → Completed states\n- **Target filtering**: Demographics, regions, interests with multiple selection support\n- **Budget management**: Daily and total budget controls with automatic calculations\n- **Partner recruitment**: Application and approval workflow\n\n### Partner Operations\n- **Sample product management**: Request and distribution tracking\n- **Shipping record system**: Daily shipping data entry with tracking numbers\n- **Performance analytics**: QR code tracking and conversion metrics\n\n### Admin Dashboard\n- **Platform oversight**: User management, campaign monitoring, performance analytics\n- **Revenue tracking**: Payment processing and settlement management\n- **System configuration**: Platform settings and category management\n\n## Data Flow\n\n### Campaign Creation Flow\n1. Advertiser creates campaign with target criteria and budget\n2. System validates input and sets campaign to \"recruiting\" status\n3. Partners browse and apply to campaigns\n4. Advertiser reviews applications and selects partners\n5. Selected partners receive sample products\n6. Campaign launches with daily shipping tracking\n7. Performance metrics collected via QR code scanning\n8. Results compiled for advertiser analysis\n\n### Authentication Flow\n1. User submits credentials via login form\n2. Server validates against bcrypt-hashed passwords\n3. Session created with user data and role information\n4. Frontend redirects to role-appropriate dashboard\n5. Subsequent requests authenticated via session cookies\n\n### Data Synchronization\n- **Real-time updates**: TanStack Query provides automatic background refetching\n- **Optimistic updates**: UI updates immediately with server reconciliation\n- **Error handling**: Comprehensive error boundaries and user feedback\n\n## External Dependencies\n\n### UI Component Libraries\n- **Radix UI**: Accessible, unstyled UI primitives\n- **Lucide React**: Icon library for consistent iconography\n- **React Hook Form**: Form handling with validation\n\n### Development Tools\n- **Vite**: Fast build tool with hot module replacement\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TypeScript**: Static type checking across the entire stack\n\n### Database Tools\n- **Drizzle Kit**: Database migrations and schema management\n- **Drizzle Zod**: Type-safe schema validation\n\n### Runtime Dependencies\n- **Date-fns**: Date manipulation and formatting\n- **clsx**: Conditional CSS class management\n- **nanoid**: Unique ID generation\n\n## Deployment Strategy\n\n### Development Environment\n- **Vite dev server**: Hot reload and fast development builds\n- **Environment variables**: Database URL and session secrets\n- **Development middleware**: Error overlay and debugging tools\n\n### Production Build Process\n1. **Frontend build**: Vite compiles React app to static assets\n2. **Backend build**: ESBuild bundles server code for Node.js\n3. **Database migrations**: Drizzle Kit applies schema changes\n4. **Asset optimization**: Static files served efficiently\n\n### Environment Configuration\n- **Database**: Neon PostgreSQL with connection pooling\n- **Session storage**: In-memory sessions (can be upgraded to Redis for scaling)\n- **Static assets**: Served via Express static middleware\n- **Environment variables**: Secure configuration for database and session secrets\n\n### Scaling Considerations\n- **Database**: Neon automatically scales with usage\n- **Session storage**: Can migrate to Redis for distributed sessions\n- **Frontend**: Static assets can be served via CDN\n- **Backend**: Stateless design allows horizontal scaling","size_bytes":7276},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertCampaignSchema, insertCampaignApplicationSchema, insertShippingRecordSchema, insertSampleProductSchema } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session configuration\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'allreview-secret-key-2025',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { \n      secure: false, \n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      httpOnly: true,\n      sameSite: 'lax'\n    }\n  }));\n\n  // Authentication middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session?.user) {\n      return res.status(401).json({ message: \"인증이 필요합니다\" });\n    }\n    next();\n  };\n\n  const requireRole = (roles: string[]) => (req: any, res: any, next: any) => {\n    if (!req.session?.user || !roles.includes(req.session.user.role)) {\n      return res.status(403).json({ message: \"권한이 없습니다\" });\n    }\n    next();\n  };\n\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"이메일과 비밀번호를 입력해주세요\" });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"잘못된 이메일 또는 비밀번호입니다\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"잘못된 이메일 또는 비밀번호입니다\" });\n      }\n\n      req.session.user = { id: user.id, email: user.email, role: user.role, companyName: user.companyName };\n      res.json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          role: user.role, \n          companyName: user.companyName \n        } \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"로그인 중 오류가 발생했습니다\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"이미 존재하는 이메일입니다\" });\n      }\n\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword\n      });\n\n      req.session.user = { id: user.id, email: user.email, role: user.role, companyName: user.companyName };\n      res.status(201).json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          role: user.role, \n          companyName: user.companyName \n        } \n      });\n    } catch (error) {\n      res.status(400).json({ message: \"회원가입 중 오류가 발생했습니다\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"로그아웃 중 오류가 발생했습니다\" });\n      }\n      res.json({ message: \"로그아웃되었습니다\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", (req, res) => {\n    if (req.session?.user) {\n      res.json({ user: req.session.user });\n    } else {\n      res.status(401).json({ message: \"인증되지 않음\" });\n    }\n  });\n\n  // Campaign routes\n  app.post(\"/api/campaigns\", requireAuth, requireRole(['advertiser', 'admin']), async (req, res) => {\n    try {\n      console.log(\"Received campaign data:\", req.body);\n      \n      // Convert string dates to Date objects and handle numeric fields\n      const processedData = {\n        ...req.body,\n        advertiserId: req.session.user.role === 'admin' ? req.body.advertiserId || req.session.user.id : req.session.user.id,\n        dailyBudget: typeof req.body.dailyBudget === 'string' ? req.body.dailyBudget : String(req.body.dailyBudget),\n        totalBudget: typeof req.body.totalBudget === 'string' ? req.body.totalBudget : String(req.body.totalBudget),\n        maxPartners: typeof req.body.maxPartners === 'number' ? req.body.maxPartners : parseInt(req.body.maxPartners),\n        recruitmentStartDate: new Date(req.body.recruitmentStartDate),\n        recruitmentEndDate: new Date(req.body.recruitmentEndDate),\n        campaignStartDate: new Date(req.body.campaignStartDate),\n        campaignEndDate: new Date(req.body.campaignEndDate),\n      };\n      \n      console.log(\"Processed campaign data:\", processedData);\n      \n      const campaignData = insertCampaignSchema.parse(processedData);\n      console.log(\"Parsed campaign data:\", campaignData);\n      \n      const campaign = await storage.createCampaign(campaignData);\n      res.status(201).json(campaign);\n    } catch (error) {\n      console.error(\"Campaign creation error:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ message: \"캠페인 생성 중 오류가 발생했습니다\", error: error.message });\n      } else {\n        res.status(400).json({ message: \"캠페인 생성 중 오류가 발생했습니다\" });\n      }\n    }\n  });\n\n  app.get(\"/api/campaigns\", requireAuth, async (req, res) => {\n    try {\n      const { role, id } = req.session.user;\n      let campaigns;\n\n      if (role === 'admin') {\n        // Admin can see all campaigns - implement if needed\n        campaigns = [];\n      } else if (role === 'advertiser') {\n        campaigns = await storage.getCampaignsByAdvertiser(id);\n      } else if (role === 'partner') {\n        campaigns = await storage.getActiveCampaigns();\n      }\n\n      res.json(campaigns);\n    } catch (error) {\n      res.status(500).json({ message: \"캠페인 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  app.get(\"/api/campaigns/:id\", requireAuth, async (req, res) => {\n    try {\n      const campaign = await storage.getCampaign(parseInt(req.params.id));\n      if (!campaign) {\n        return res.status(404).json({ message: \"캠페인을 찾을 수 없습니다\" });\n      }\n      res.json(campaign);\n    } catch (error) {\n      res.status(500).json({ message: \"캠페인 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  app.put(\"/api/campaigns/:id\", requireAuth, requireRole(['advertiser', 'admin']), async (req, res) => {\n    try {\n      const campaign = await storage.updateCampaign(parseInt(req.params.id), req.body);\n      if (!campaign) {\n        return res.status(404).json({ message: \"캠페인을 찾을 수 없습니다\" });\n      }\n      res.json(campaign);\n    } catch (error) {\n      res.status(500).json({ message: \"캠페인 수정 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Campaign application routes\n  app.post(\"/api/campaigns/:id/apply\", requireAuth, requireRole(['partner']), async (req, res) => {\n    try {\n      const applicationData = insertCampaignApplicationSchema.parse({\n        campaignId: parseInt(req.params.id),\n        partnerId: req.session.user.id,\n        applicationMessage: req.body.applicationMessage\n      });\n\n      const application = await storage.createCampaignApplication(applicationData);\n      res.status(201).json(application);\n    } catch (error) {\n      res.status(400).json({ message: \"캠페인 신청 중 오류가 발생했습니다\" });\n    }\n  });\n\n  app.get(\"/api/campaigns/:id/applications\", requireAuth, requireRole(['advertiser', 'admin']), async (req, res) => {\n    try {\n      const applications = await storage.getCampaignApplications(parseInt(req.params.id));\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: \"신청 목록 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  app.put(\"/api/applications/:id/status\", requireAuth, requireRole(['advertiser', 'admin']), async (req, res) => {\n    try {\n      const { status } = req.body;\n      const application = await storage.updateApplicationStatus(\n        parseInt(req.params.id), \n        status, \n        req.session.user.id\n      );\n      if (!application) {\n        return res.status(404).json({ message: \"신청을 찾을 수 없습니다\" });\n      }\n      res.json(application);\n    } catch (error) {\n      res.status(500).json({ message: \"신청 상태 변경 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Sample product routes\n  app.post(\"/api/sample-products\", requireAuth, requireRole(['partner']), async (req, res) => {\n    try {\n      const sampleData = insertSampleProductSchema.parse({\n        ...req.body,\n        partnerId: req.session.user.id\n      });\n      \n      const sampleProduct = await storage.createSampleProduct(sampleData);\n      res.status(201).json(sampleProduct);\n    } catch (error) {\n      res.status(400).json({ message: \"샘플 요청 중 오류가 발생했습니다\" });\n    }\n  });\n\n  app.get(\"/api/sample-products\", requireAuth, async (req, res) => {\n    try {\n      const { role, id } = req.session.user;\n      let sampleProducts;\n\n      if (role === 'partner') {\n        sampleProducts = await storage.getSampleProductsByPartner(id);\n      } else {\n        // For admin/advertiser, implement campaign-based filtering if needed\n        sampleProducts = [];\n      }\n\n      res.json(sampleProducts);\n    } catch (error) {\n      res.status(500).json({ message: \"샘플 목록 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  app.put(\"/api/sample-products/:id/status\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { status } = req.body;\n      const sampleProduct = await storage.updateSampleProductStatus(parseInt(req.params.id), status);\n      if (!sampleProduct) {\n        return res.status(404).json({ message: \"샘플을 찾을 수 없습니다\" });\n      }\n      res.json(sampleProduct);\n    } catch (error) {\n      res.status(500).json({ message: \"샘플 상태 변경 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Shipping record routes\n  app.post(\"/api/shipping-records\", requireAuth, requireRole(['partner']), async (req, res) => {\n    try {\n      const shippingData = insertShippingRecordSchema.parse({\n        ...req.body,\n        partnerId: req.session.user.id\n      });\n      \n      const shippingRecord = await storage.createShippingRecord(shippingData);\n      res.status(201).json(shippingRecord);\n    } catch (error) {\n      res.status(400).json({ message: \"발송 등록 중 오류가 발생했습니다\" });\n    }\n  });\n\n  app.get(\"/api/shipping-records\", requireAuth, async (req, res) => {\n    try {\n      const { role, id } = req.session.user;\n      const { startDate, endDate } = req.query;\n      let shippingRecords;\n\n      if (role === 'partner') {\n        shippingRecords = await storage.getShippingRecordsByPartner(id);\n      } else if (startDate && endDate) {\n        shippingRecords = await storage.getShippingRecordsByDateRange(\n          new Date(startDate as string), \n          new Date(endDate as string)\n        );\n      } else {\n        shippingRecords = [];\n      }\n\n      res.json(shippingRecords);\n    } catch (error) {\n      res.status(500).json({ message: \"발송 기록 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Performance metrics routes\n  app.get(\"/api/performance-metrics\", requireAuth, async (req, res) => {\n    try {\n      const { campaignId, startDate, endDate } = req.query;\n      \n      let metrics;\n      if (startDate && endDate) {\n        metrics = await storage.getPerformanceMetricsByDateRange(\n          new Date(startDate as string),\n          new Date(endDate as string),\n          campaignId ? parseInt(campaignId as string) : undefined\n        );\n      } else if (campaignId) {\n        metrics = await storage.getPerformanceMetrics(parseInt(campaignId as string));\n      } else {\n        // Return all metrics for the user's campaigns if no specific campaign ID\n        const userCampaigns = await storage.getCampaignsByAdvertiser(req.session.user.id);\n        if (userCampaigns.length > 0) {\n          // Get metrics for the first campaign\n          metrics = await storage.getPerformanceMetrics(userCampaigns[0].id);\n        } else {\n          metrics = [];\n        }\n      }\n\n      res.json(metrics);\n    } catch (error) {\n      console.error('Performance metrics error:', error);\n      res.status(500).json({ message: \"성과 데이터 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Payment routes\n  app.post(\"/api/payments\", requireAuth, requireRole(['advertiser']), async (req, res) => {\n    try {\n      const { insertPaymentSchema } = await import(\"@shared/schema\");\n      const paymentData = insertPaymentSchema.parse({\n        ...req.body,\n        advertiserId: req.session.user.id\n      });\n      \n      const payment = await storage.createPayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error) {\n      console.error('Payment creation error:', error);\n      res.status(400).json({ message: \"결제 처리 중 오류가 발생했습니다\" });\n    }\n  });\n\n  app.get(\"/api/payments\", requireAuth, async (req, res) => {\n    try {\n      const { role, id } = req.session.user;\n      let payments;\n\n      if (role === 'admin') {\n        payments = await storage.getAllPayments();\n      } else if (role === 'advertiser') {\n        payments = await storage.getPaymentsByAdvertiser(id);\n      } else {\n        payments = [];\n      }\n\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: \"결제 내역 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Partner earnings routes\n  app.get(\"/api/partner-earnings\", requireAuth, requireRole(['partner', 'admin']), async (req, res) => {\n    try {\n      const { role, id } = req.session.user;\n      let earnings;\n\n      if (role === 'admin') {\n        earnings = await storage.getAllPartnerEarnings();\n      } else if (role === 'partner') {\n        earnings = await storage.getPartnerEarnings(id);\n      } else {\n        earnings = [];\n      }\n\n      res.json(earnings);\n    } catch (error) {\n      res.status(500).json({ message: \"수익 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Admin dashboard stats\n  app.get(\"/api/admin/stats\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const stats = await storage.getAdminStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Admin stats error:', error);\n      res.status(500).json({ message: \"통계 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Partner management routes\n  app.get(\"/api/partners\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const partners = await storage.getAllPartners();\n      res.json(partners);\n    } catch (error) {\n      res.status(500).json({ message: \"파트너 목록 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  app.put(\"/api/partners/:id/status\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { isActive } = req.body;\n      const partner = await storage.updatePartnerStatus(parseInt(req.params.id), isActive);\n      if (!partner) {\n        return res.status(404).json({ message: \"파트너를 찾을 수 없습니다\" });\n      }\n      res.json(partner);\n    } catch (error) {\n      res.status(500).json({ message: \"파트너 상태 변경 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Bulk shipping record creation\n  app.post(\"/api/shipping-records/bulk\", requireAuth, requireRole(['partner']), async (req, res) => {\n    try {\n      const { records } = req.body;\n      const shippingRecords = records.map((record: any) => ({\n        ...record,\n        partnerId: req.session.user.id\n      }));\n      \n      const createdRecords = await storage.createBulkShippingRecords(shippingRecords);\n      res.status(201).json(createdRecords);\n    } catch (error) {\n      res.status(400).json({ message: \"일괄 발송 등록 중 오류가 발생했습니다\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16269},"server/storage.ts":{"content":"import { \n  users, \n  campaigns, \n  campaignApplications, \n  sampleProducts, \n  shippingRecords, \n  performanceMetrics,\n  partnerCategories,\n  payments,\n  partnerEarnings,\n  type User, \n  type InsertUser,\n  type Campaign,\n  type InsertCampaign,\n  type CampaignApplication,\n  type InsertCampaignApplication,\n  type SampleProduct,\n  type InsertSampleProduct,\n  type ShippingRecord,\n  type InsertShippingRecord,\n  type PerformanceMetric,\n  type InsertPerformanceMetric,\n  type PartnerCategory,\n  type InsertPartnerCategory,\n  type Payment,\n  type InsertPayment,\n  type PartnerEarning,\n  type InsertPartnerEarning\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, gte, lte, count, sum } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: Partial<InsertUser>): Promise<User | undefined>;\n  getUsersByRole(role: string): Promise<User[]>;\n\n  // Campaign management\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  getCampaign(id: number): Promise<Campaign | undefined>;\n  getCampaignsByAdvertiser(advertiserId: number): Promise<Campaign[]>;\n  getActiveCampaigns(): Promise<Campaign[]>;\n  updateCampaign(id: number, campaign: Partial<InsertCampaign>): Promise<Campaign | undefined>;\n  deleteCampaign(id: number): Promise<boolean>;\n\n  // Campaign applications\n  createCampaignApplication(application: InsertCampaignApplication): Promise<CampaignApplication>;\n  getCampaignApplications(campaignId: number): Promise<CampaignApplication[]>;\n  getPartnerApplications(partnerId: number): Promise<CampaignApplication[]>;\n  updateApplicationStatus(id: number, status: string, reviewedBy: number): Promise<CampaignApplication | undefined>;\n\n  // Sample products\n  createSampleProduct(sampleProduct: InsertSampleProduct): Promise<SampleProduct>;\n  getSampleProductsByPartner(partnerId: number): Promise<SampleProduct[]>;\n  getSampleProductsByCampaign(campaignId: number): Promise<SampleProduct[]>;\n  updateSampleProductStatus(id: number, status: string): Promise<SampleProduct | undefined>;\n\n  // Shipping records\n  createShippingRecord(shippingRecord: InsertShippingRecord): Promise<ShippingRecord>;\n  getShippingRecordsByPartner(partnerId: number): Promise<ShippingRecord[]>;\n  getShippingRecordsByCampaign(campaignId: number): Promise<ShippingRecord[]>;\n  getShippingRecordsByDateRange(startDate: Date, endDate: Date): Promise<ShippingRecord[]>;\n\n  // Performance metrics\n  createPerformanceMetric(metric: InsertPerformanceMetric): Promise<PerformanceMetric>;\n  getPerformanceMetrics(campaignId: number, partnerId?: number): Promise<PerformanceMetric[]>;\n  getPerformanceMetricsByDateRange(startDate: Date, endDate: Date, campaignId?: number): Promise<PerformanceMetric[]>;\n\n  // Partner categories\n  createPartnerCategory(category: InsertPartnerCategory): Promise<PartnerCategory>;\n  getPartnerCategories(partnerId: number): Promise<PartnerCategory[]>;\n  updatePartnerCategory(id: number, category: Partial<InsertPartnerCategory>): Promise<PartnerCategory | undefined>;\n\n  // Dashboard analytics\n  getAdminStats(): Promise<{\n    totalCampaigns: number;\n    activePartners: number;\n    monthlyRevenue: string;\n    successRate: string;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User management\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: number, updateData: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db.update(users).set(updateData).where(eq(users.id, id)).returning();\n    return user || undefined;\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, role));\n  }\n\n  // Campaign management\n  async createCampaign(insertCampaign: InsertCampaign): Promise<Campaign> {\n    const [campaign] = await db.insert(campaigns).values(insertCampaign).returning();\n    return campaign;\n  }\n\n  async getCampaign(id: number): Promise<Campaign | undefined> {\n    const [campaign] = await db.select().from(campaigns).where(eq(campaigns.id, id));\n    return campaign || undefined;\n  }\n\n  async getCampaignsByAdvertiser(advertiserId: number): Promise<Campaign[]> {\n    return await db.select().from(campaigns).where(eq(campaigns.advertiserId, advertiserId)).orderBy(desc(campaigns.createdAt));\n  }\n\n  async getActiveCampaigns(): Promise<Campaign[]> {\n    const now = new Date();\n    return await db.select().from(campaigns).where(\n      and(\n        eq(campaigns.status, \"recruiting\"),\n        lte(campaigns.recruitmentStartDate, now),\n        gte(campaigns.recruitmentEndDate, now)\n      )\n    ).orderBy(desc(campaigns.createdAt));\n  }\n\n  async updateCampaign(id: number, updateData: Partial<InsertCampaign>): Promise<Campaign | undefined> {\n    const [campaign] = await db.update(campaigns).set(updateData).where(eq(campaigns.id, id)).returning();\n    return campaign || undefined;\n  }\n\n  async deleteCampaign(id: number): Promise<boolean> {\n    const result = await db.delete(campaigns).where(eq(campaigns.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Campaign applications\n  async createCampaignApplication(insertApplication: InsertCampaignApplication): Promise<CampaignApplication> {\n    const [application] = await db.insert(campaignApplications).values(insertApplication).returning();\n    return application;\n  }\n\n  async getCampaignApplications(campaignId: number): Promise<CampaignApplication[]> {\n    return await db.select().from(campaignApplications).where(eq(campaignApplications.campaignId, campaignId));\n  }\n\n  async getPartnerApplications(partnerId: number): Promise<CampaignApplication[]> {\n    return await db.select().from(campaignApplications).where(eq(campaignApplications.partnerId, partnerId));\n  }\n\n  async updateApplicationStatus(id: number, status: string, reviewedBy: number): Promise<CampaignApplication | undefined> {\n    const [application] = await db.update(campaignApplications).set({\n      status,\n      reviewedBy,\n      reviewedAt: new Date()\n    }).where(eq(campaignApplications.id, id)).returning();\n    return application || undefined;\n  }\n\n  // Sample products\n  async createSampleProduct(insertSampleProduct: InsertSampleProduct): Promise<SampleProduct> {\n    const [sampleProduct] = await db.insert(sampleProducts).values(insertSampleProduct).returning();\n    return sampleProduct;\n  }\n\n  async getSampleProductsByPartner(partnerId: number): Promise<SampleProduct[]> {\n    return await db.select().from(sampleProducts).where(eq(sampleProducts.partnerId, partnerId));\n  }\n\n  async getSampleProductsByCampaign(campaignId: number): Promise<SampleProduct[]> {\n    return await db.select().from(sampleProducts).where(eq(sampleProducts.campaignId, campaignId));\n  }\n\n  async updateSampleProductStatus(id: number, status: string): Promise<SampleProduct | undefined> {\n    const updateData: any = { status };\n    if (status === \"approved\") {\n      updateData.approvedAt = new Date();\n    } else if (status === \"shipped\") {\n      updateData.shippedAt = new Date();\n    }\n    \n    const [sampleProduct] = await db.update(sampleProducts).set(updateData).where(eq(sampleProducts.id, id)).returning();\n    return sampleProduct || undefined;\n  }\n\n  // Shipping records\n  async createShippingRecord(insertShippingRecord: InsertShippingRecord): Promise<ShippingRecord> {\n    const [shippingRecord] = await db.insert(shippingRecords).values(insertShippingRecord).returning();\n    return shippingRecord;\n  }\n\n  async getShippingRecordsByPartner(partnerId: number): Promise<ShippingRecord[]> {\n    return await db.select().from(shippingRecords).where(eq(shippingRecords.partnerId, partnerId)).orderBy(desc(shippingRecords.createdAt));\n  }\n\n  async getShippingRecordsByCampaign(campaignId: number): Promise<ShippingRecord[]> {\n    return await db.select().from(shippingRecords).where(eq(shippingRecords.campaignId, campaignId)).orderBy(desc(shippingRecords.createdAt));\n  }\n\n  async getShippingRecordsByDateRange(startDate: Date, endDate: Date): Promise<ShippingRecord[]> {\n    return await db.select().from(shippingRecords).where(\n      and(\n        gte(shippingRecords.shippingDate, startDate),\n        lte(shippingRecords.shippingDate, endDate)\n      )\n    ).orderBy(desc(shippingRecords.shippingDate));\n  }\n\n  // Performance metrics\n  async createPerformanceMetric(insertMetric: InsertPerformanceMetric): Promise<PerformanceMetric> {\n    const [metric] = await db.insert(performanceMetrics).values(insertMetric).returning();\n    return metric;\n  }\n\n  async getPerformanceMetrics(campaignId: number, partnerId?: number): Promise<PerformanceMetric[]> {\n    const conditions = [eq(performanceMetrics.campaignId, campaignId)];\n    if (partnerId) {\n      conditions.push(eq(performanceMetrics.partnerId, partnerId));\n    }\n    return await db.select().from(performanceMetrics).where(and(...conditions)).orderBy(desc(performanceMetrics.date));\n  }\n\n  async getPerformanceMetricsByDateRange(startDate: Date, endDate: Date, campaignId?: number): Promise<PerformanceMetric[]> {\n    const conditions = [\n      gte(performanceMetrics.date, startDate),\n      lte(performanceMetrics.date, endDate)\n    ];\n    if (campaignId) {\n      conditions.push(eq(performanceMetrics.campaignId, campaignId));\n    }\n    return await db.select().from(performanceMetrics).where(and(...conditions)).orderBy(desc(performanceMetrics.date));\n  }\n\n  // Partner categories\n  async createPartnerCategory(insertCategory: InsertPartnerCategory): Promise<PartnerCategory> {\n    const [category] = await db.insert(partnerCategories).values(insertCategory).returning();\n    return category;\n  }\n\n  async getPartnerCategories(partnerId: number): Promise<PartnerCategory[]> {\n    return await db.select().from(partnerCategories).where(eq(partnerCategories.partnerId, partnerId));\n  }\n\n  async updatePartnerCategory(id: number, updateData: Partial<InsertPartnerCategory>): Promise<PartnerCategory | undefined> {\n    const [category] = await db.update(partnerCategories).set(updateData).where(eq(partnerCategories.id, id)).returning();\n    return category || undefined;\n  }\n\n  // Payment management\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    const [payment] = await db.insert(payments).values(insertPayment).returning();\n    return payment;\n  }\n\n  async getPaymentsByAdvertiser(advertiserId: number): Promise<Payment[]> {\n    return await db.select().from(payments).where(eq(payments.advertiserId, advertiserId)).orderBy(desc(payments.createdAt));\n  }\n\n  async getAllPayments(): Promise<Payment[]> {\n    return await db.select().from(payments).orderBy(desc(payments.createdAt));\n  }\n\n  async updatePaymentStatus(id: number, status: string, transactionId?: string): Promise<Payment | undefined> {\n    const updateData: any = { status, processedAt: new Date() };\n    if (transactionId) updateData.transactionId = transactionId;\n    \n    const [payment] = await db.update(payments).set(updateData).where(eq(payments.id, id)).returning();\n    return payment || undefined;\n  }\n\n  // Partner earnings management\n  async createPartnerEarning(insertEarning: InsertPartnerEarning): Promise<PartnerEarning> {\n    const [earning] = await db.insert(partnerEarnings).values(insertEarning).returning();\n    return earning;\n  }\n\n  async getPartnerEarnings(partnerId: number): Promise<PartnerEarning[]> {\n    return await db.select().from(partnerEarnings).where(eq(partnerEarnings.partnerId, partnerId)).orderBy(desc(partnerEarnings.earnedAt));\n  }\n\n  async getAllPartnerEarnings(): Promise<PartnerEarning[]> {\n    return await db.select().from(partnerEarnings).orderBy(desc(partnerEarnings.earnedAt));\n  }\n\n  async updatePartnerEarningStatus(id: number, status: string): Promise<PartnerEarning | undefined> {\n    const updateData: any = { status };\n    if (status === 'paid') updateData.paidAt = new Date();\n    \n    const [earning] = await db.update(partnerEarnings).set(updateData).where(eq(partnerEarnings.id, id)).returning();\n    return earning || undefined;\n  }\n\n  // Dashboard analytics\n  async getAdminStats(): Promise<{\n    totalCampaigns: number;\n    activePartners: number;\n    monthlyRevenue: string;\n    successRate: string;\n  }> {\n    const totalCampaignsResult = await db.select({ count: count() }).from(campaigns);\n    const activePartnersResult = await db.select({ count: count() }).from(users).where(and(eq(users.role, \"partner\"), eq(users.isActive, true)));\n    \n    // Calculate actual monthly revenue from performance metrics\n    const currentMonth = new Date();\n    const firstDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const lastDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n    \n    const revenueResult = await db.select({ \n      totalRevenue: sum(performanceMetrics.revenue) \n    }).from(performanceMetrics).where(\n      and(\n        gte(performanceMetrics.date, firstDay),\n        lte(performanceMetrics.date, lastDay)\n      )\n    );\n    \n    // Calculate success rate from shipping records\n    const totalShippedResult = await db.select({ count: count() }).from(shippingRecords);\n    const successfulDeliveries = await db.select({ count: count() }).from(shippingRecords).where(eq(shippingRecords.status, 'delivered'));\n    \n    const totalShipped = totalShippedResult[0]?.count || 0;\n    const successRate = totalShipped > 0 ? ((successfulDeliveries[0]?.count || 0) / totalShipped * 100).toFixed(1) : \"0\";\n    \n    return {\n      totalCampaigns: totalCampaignsResult[0]?.count || 0,\n      activePartners: activePartnersResult[0]?.count || 0,\n      monthlyRevenue: revenueResult[0]?.totalRevenue?.toString() || \"0\",\n      successRate: successRate\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14325},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb, decimal, varchar } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table - for authentication and role management\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // 'admin', 'advertiser', 'partner'\n  companyName: text(\"company_name\"),\n  contactPerson: text(\"contact_person\"),\n  phoneNumber: text(\"phone_number\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Campaigns table\nexport const campaigns = pgTable(\"campaigns\", {\n  id: serial(\"id\").primaryKey(),\n  advertiserId: integer(\"advertiser_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(),\n  dailyBudget: decimal(\"daily_budget\", { precision: 12, scale: 2 }).notNull(),\n  totalBudget: decimal(\"total_budget\", { precision: 12, scale: 2 }).notNull(),\n  targetFilters: jsonb(\"target_filters\"), // ages, regions, interests\n  recruitmentStartDate: timestamp(\"recruitment_start_date\").notNull(),\n  recruitmentEndDate: timestamp(\"recruitment_end_date\").notNull(),\n  campaignStartDate: timestamp(\"campaign_start_date\").notNull(),\n  campaignEndDate: timestamp(\"campaign_end_date\").notNull(),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, recruiting, active, completed, cancelled\n  maxPartners: integer(\"max_partners\").default(10),\n  selectedPartners: integer(\"selected_partners\").default(0),\n  qrCodeUrl: text(\"qr_code_url\"),\n  productUrl: text(\"product_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Campaign applications from partners\nexport const campaignApplications = pgTable(\"campaign_applications\", {\n  id: serial(\"id\").primaryKey(),\n  campaignId: integer(\"campaign_id\").notNull(),\n  partnerId: integer(\"partner_id\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, rejected\n  applicationMessage: text(\"application_message\"),\n  appliedAt: timestamp(\"applied_at\").defaultNow(),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewedBy: integer(\"reviewed_by\"),\n});\n\n// Sample products management\nexport const sampleProducts = pgTable(\"sample_products\", {\n  id: serial(\"id\").primaryKey(),\n  campaignId: integer(\"campaign_id\").notNull(),\n  partnerId: integer(\"partner_id\").notNull(),\n  productName: text(\"product_name\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, shipped, delivered\n  requestedAt: timestamp(\"requested_at\").defaultNow(),\n  approvedAt: timestamp(\"approved_at\"),\n  shippedAt: timestamp(\"shipped_at\"),\n  trackingNumber: text(\"tracking_number\"),\n});\n\n// Shipping records\nexport const shippingRecords = pgTable(\"shipping_records\", {\n  id: serial(\"id\").primaryKey(),\n  campaignId: integer(\"campaign_id\").notNull(),\n  partnerId: integer(\"partner_id\").notNull(),\n  shippingDate: timestamp(\"shipping_date\").notNull(),\n  trackingNumber: text(\"tracking_number\").notNull(),\n  productName: text(\"product_name\").notNull(),\n  recipientInfo: jsonb(\"recipient_info\"), // name, address, phone\n  memo: text(\"memo\"),\n  status: text(\"status\").notNull().default(\"shipped\"), // shipped, delivered, failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Performance tracking\nexport const performanceMetrics = pgTable(\"performance_metrics\", {\n  id: serial(\"id\").primaryKey(),\n  campaignId: integer(\"campaign_id\").notNull(),\n  partnerId: integer(\"partner_id\"),\n  date: timestamp(\"date\").notNull(),\n  qrScans: integer(\"qr_scans\").default(0),\n  conversions: integer(\"conversions\").default(0),\n  revenue: decimal(\"revenue\", { precision: 12, scale: 2 }).default(\"0\"),\n  deliveryRate: decimal(\"delivery_rate\", { precision: 5, scale: 2 }).default(\"0\"), // percentage\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Partner delivery categories and performance history\nexport const partnerCategories = pgTable(\"partner_categories\", {\n  id: serial(\"id\").primaryKey(),\n  partnerId: integer(\"partner_id\").notNull(),\n  category: text(\"category\").notNull(),\n  deliveryCapacity: integer(\"delivery_capacity\").notNull(),\n  successRate: decimal(\"success_rate\", { precision: 5, scale: 2 }).default(\"0\"),\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Payment and billing system\nexport const payments = pgTable(\"payments\", {\n  id: serial(\"id\").primaryKey(),\n  campaignId: integer(\"campaign_id\").notNull(),\n  advertiserId: integer(\"advertiser_id\").notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, completed, failed, refunded\n  paymentMethod: text(\"payment_method\").notNull(), // card, bank_transfer, etc\n  transactionId: text(\"transaction_id\"),\n  processedAt: timestamp(\"processed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Partner earnings\nexport const partnerEarnings = pgTable(\"partner_earnings\", {\n  id: serial(\"id\").primaryKey(),\n  partnerId: integer(\"partner_id\").notNull(),\n  campaignId: integer(\"campaign_id\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, paid, failed\n  earnedAt: timestamp(\"earned_at\").defaultNow(),\n  paidAt: timestamp(\"paid_at\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  campaigns: many(campaigns),\n  applications: many(campaignApplications),\n  sampleProducts: many(sampleProducts),\n  shippingRecords: many(shippingRecords),\n  partnerCategories: many(partnerCategories),\n}));\n\nexport const campaignsRelations = relations(campaigns, ({ one, many }) => ({\n  advertiser: one(users, {\n    fields: [campaigns.advertiserId],\n    references: [users.id],\n  }),\n  applications: many(campaignApplications),\n  sampleProducts: many(sampleProducts),\n  shippingRecords: many(shippingRecords),\n  performanceMetrics: many(performanceMetrics),\n}));\n\nexport const campaignApplicationsRelations = relations(campaignApplications, ({ one }) => ({\n  campaign: one(campaigns, {\n    fields: [campaignApplications.campaignId],\n    references: [campaigns.id],\n  }),\n  partner: one(users, {\n    fields: [campaignApplications.partnerId],\n    references: [users.id],\n  }),\n  reviewer: one(users, {\n    fields: [campaignApplications.reviewedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const sampleProductsRelations = relations(sampleProducts, ({ one }) => ({\n  campaign: one(campaigns, {\n    fields: [sampleProducts.campaignId],\n    references: [campaigns.id],\n  }),\n  partner: one(users, {\n    fields: [sampleProducts.partnerId],\n    references: [users.id],\n  }),\n}));\n\nexport const shippingRecordsRelations = relations(shippingRecords, ({ one }) => ({\n  campaign: one(campaigns, {\n    fields: [shippingRecords.campaignId],\n    references: [campaigns.id],\n  }),\n  partner: one(users, {\n    fields: [shippingRecords.partnerId],\n    references: [users.id],\n  }),\n}));\n\nexport const performanceMetricsRelations = relations(performanceMetrics, ({ one }) => ({\n  campaign: one(campaigns, {\n    fields: [performanceMetrics.campaignId],\n    references: [campaigns.id],\n  }),\n  partner: one(users, {\n    fields: [performanceMetrics.partnerId],\n    references: [users.id],\n  }),\n}));\n\nexport const partnerCategoriesRelations = relations(partnerCategories, ({ one }) => ({\n  partner: one(users, {\n    fields: [partnerCategories.partnerId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  createdAt: true,\n  selectedPartners: true,\n});\n\nexport const insertCampaignApplicationSchema = createInsertSchema(campaignApplications).omit({\n  id: true,\n  appliedAt: true,\n  reviewedAt: true,\n});\n\nexport const insertSampleProductSchema = createInsertSchema(sampleProducts).omit({\n  id: true,\n  requestedAt: true,\n  approvedAt: true,\n  shippedAt: true,\n});\n\nexport const insertShippingRecordSchema = createInsertSchema(shippingRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPerformanceMetricSchema = createInsertSchema(performanceMetrics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPartnerCategorySchema = createInsertSchema(partnerCategories).omit({\n  id: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type CampaignApplication = typeof campaignApplications.$inferSelect;\nexport type InsertCampaignApplication = z.infer<typeof insertCampaignApplicationSchema>;\nexport type SampleProduct = typeof sampleProducts.$inferSelect;\nexport type InsertSampleProduct = z.infer<typeof insertSampleProductSchema>;\nexport type ShippingRecord = typeof shippingRecords.$inferSelect;\nexport type InsertShippingRecord = z.infer<typeof insertShippingRecordSchema>;\nexport type PerformanceMetric = typeof performanceMetrics.$inferSelect;\nexport type InsertPerformanceMetric = z.infer<typeof insertPerformanceMetricSchema>;\nexport type PartnerCategory = typeof partnerCategories.$inferSelect;\nexport type InsertPartnerCategory = z.infer<typeof insertPartnerCategorySchema>;\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  processedAt: true,\n});\n\nexport const insertPartnerEarningSchema = createInsertSchema(partnerEarnings).omit({\n  id: true,\n  earnedAt: true,\n  paidAt: true,\n});\n\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\n\nexport type PartnerEarning = typeof partnerEarnings.$inferSelect;\nexport type InsertPartnerEarning = z.infer<typeof insertPartnerEarningSchema>;\n","size_bytes":10134},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Header from \"@/components/layout/Header\";\nimport HomePage from \"@/pages/HomePage\";\nimport LoginPage from \"@/pages/LoginPage\";\nimport DashboardPage from \"@/pages/DashboardPage\";\nimport CampaignsPage from \"@/pages/CampaignsPage\";\nimport AnalyticsPage from \"@/pages/AnalyticsPage\";\nimport PaymentsPage from \"@/pages/PaymentsPage\";\nimport SettingsPage from \"@/pages/SettingsPage\";\nimport SamplesPage from \"@/pages/SamplesPage\";\nimport ShippingPage from \"@/pages/ShippingPage\";\nimport RecordsPage from \"@/pages/RecordsPage\";\nimport RevenuePage from \"@/pages/RevenuePage\";\nimport PartnersPage from \"@/pages/PartnersPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <div>\n      <Header />\n      <main className=\"min-h-screen bg-gray-50\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <Switch>\n            <Route path=\"/\" component={HomePage} />\n            <Route path=\"/login\" component={LoginPage} />\n            <Route path=\"/dashboard\" component={DashboardPage} />\n            <Route path=\"/dashboard/campaigns\" component={CampaignsPage} />\n            <Route path=\"/dashboard/analytics\" component={AnalyticsPage} />\n            <Route path=\"/dashboard/billing\" component={PaymentsPage} />\n            <Route path=\"/dashboard/settings\" component={SettingsPage} />\n            <Route path=\"/dashboard/samples\" component={SamplesPage} />\n            <Route path=\"/dashboard/shipping\" component={ShippingPage} />\n            <Route path=\"/dashboard/records\" component={RecordsPage} />\n            <Route path=\"/dashboard/revenue\" component={RevenuePage} />\n            <Route path=\"/dashboard/partners\" component={PartnersPage} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2274},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Noto Sans KR', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-weight: 600;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground));\n}\n\n/* Smooth transitions for interactive elements */\n.transition-colors {\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n/* Focus styles for accessibility */\n.focus\\:ring-2:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 2px hsl(var(--primary));\n}\n\n/* Loading animation */\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Custom animations for dashboard cards */\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fade-in-up {\n  animation: fadeInUp 0.5s ease-out forwards;\n}\n\n/* Button hover effects */\n.btn-hover-lift:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n/* Card hover effects */\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n","size_bytes":3274},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"returnNull\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes for auth queries\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1423},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AnalyticsPage.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Campaign } from \"@/types\";\nimport { BarChart3, DollarSign, TrendingUp, Activity } from \"lucide-react\";\nimport { LineChart, Line, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from \"recharts\";\n\nexport default function AnalyticsPage() {\n  const { data: campaigns } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  // Fetch performance metrics for the first campaign (for demo)\n  const { data: performanceData, isLoading } = useQuery({\n    queryKey: [\"/api/performance-metrics\"],\n    queryFn: async () => {\n      if (!campaigns?.[0]?.id) return [];\n      const params = new URLSearchParams({ campaignId: campaigns[0].id.toString() });\n      const response = await fetch(`/api/performance-metrics?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch performance data');\n      return response.json();\n    },\n    enabled: !!campaigns?.[0]?.id,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-500\">분석 데이터를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900\">캠페인 분석</h1>\n        <p className=\"text-gray-500\">캠페인의 성과를 상세히 분석하고 인사이트를 확인하세요</p>\n      </div>\n\n      {performanceData && performanceData.length > 0 ? (\n        <>\n          {/* Performance Summary Cards */}\n          <div className=\"grid md:grid-cols-4 gap-6\">\n            {(() => {\n              const totalScans = performanceData.reduce((sum, metric) => sum + metric.qrScans, 0);\n              const totalConversions = performanceData.reduce((sum, metric) => sum + metric.conversions, 0);\n              const totalRevenue = performanceData.reduce((sum, metric) => sum + Number(metric.revenue), 0);\n              const avgDeliveryRate = performanceData.reduce((sum, metric) => sum + Number(metric.deliveryRate), 0) / performanceData.length;\n              const conversionRate = totalScans > 0 ? (totalConversions / totalScans * 100) : 0;\n\n              return (\n                <>\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium text-gray-600\">총 QR 스캔</CardTitle>\n                      <Activity className=\"h-4 w-4 text-blue-600\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold text-blue-600\">{totalScans.toLocaleString()}</div>\n                      <p className=\"text-xs text-gray-500 mt-1\">누적 스캔 수</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium text-gray-600\">전환율</CardTitle>\n                      <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold text-green-600\">{conversionRate.toFixed(1)}%</div>\n                      <p className=\"text-xs text-gray-500 mt-1\">{totalConversions}회 전환</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium text-gray-600\">총 매출</CardTitle>\n                      <DollarSign className=\"h-4 w-4 text-yellow-600\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold text-yellow-600\">₩{totalRevenue.toLocaleString()}</div>\n                      <p className=\"text-xs text-gray-500 mt-1\">누적 매출</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium text-gray-600\">배송 성공률</CardTitle>\n                      <BarChart3 className=\"h-4 w-4 text-purple-600\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold text-purple-600\">{avgDeliveryRate.toFixed(1)}%</div>\n                      <p className=\"text-xs text-gray-500 mt-1\">평균 성공률</p>\n                    </CardContent>\n                  </Card>\n                </>\n              );\n            })()}\n          </div>\n\n          {/* Charts Section */}\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            {/* QR Scans & Conversions Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"h-5 w-5\" />\n                  QR 스캔 & 전환율 추이\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={performanceData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tickFormatter={(value) => new Date(value).toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(value) => new Date(value).toLocaleDateString('ko-KR')}\n                      formatter={(value, name) => [\n                        value,\n                        name === 'qrScans' ? 'QR 스캔' : '전환'\n                      ]}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"qrScans\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ r: 4 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"conversions\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ r: 4 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Revenue Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5\" />\n                  매출 추이\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={performanceData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tickFormatter={(value) => new Date(value).toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      tickFormatter={(value) => `₩${(value / 1000).toFixed(0)}K`}\n                    />\n                    <Tooltip \n                      labelFormatter={(value) => new Date(value).toLocaleDateString('ko-KR')}\n                      formatter={(value) => [`₩${Number(value).toLocaleString()}`, '매출']}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#f59e0b\" \n                      fill=\"#fbbf24\" \n                      fillOpacity={0.3}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Delivery Rate Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  배송 성공률 추이\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={performanceData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tickFormatter={(value) => new Date(value).toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      domain={[0, 100]}\n                      tickFormatter={(value) => `${value}%`}\n                    />\n                    <Tooltip \n                      labelFormatter={(value) => new Date(value).toLocaleDateString('ko-KR')}\n                      formatter={(value) => [`${Number(value).toFixed(1)}%`, '배송 성공률']}\n                    />\n                    <Bar \n                      dataKey=\"deliveryRate\" \n                      fill=\"#8b5cf6\" \n                      radius={[4, 4, 0, 0]}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Performance Summary Table */}\n            <Card>\n              <CardHeader>\n                <CardTitle>상세 성과 요약</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {(() => {\n                    const totalScans = performanceData.reduce((sum, metric) => sum + metric.qrScans, 0);\n                    const totalConversions = performanceData.reduce((sum, metric) => sum + metric.conversions, 0);\n                    const totalRevenue = performanceData.reduce((sum, metric) => sum + Number(metric.revenue), 0);\n                    const avgDeliveryRate = performanceData.reduce((sum, metric) => sum + Number(metric.deliveryRate), 0) / performanceData.length;\n                    const conversionRate = totalScans > 0 ? (totalConversions / totalScans * 100) : 0;\n                    const avgRevenuePerScan = totalScans > 0 ? totalRevenue / totalScans : 0;\n\n                    return (\n                      <>\n                        <div className=\"flex justify-between items-center py-2 border-b\">\n                          <span className=\"text-gray-600\">총 QR 스캔</span>\n                          <span className=\"font-semibold\">{totalScans.toLocaleString()}회</span>\n                        </div>\n                        <div className=\"flex justify-between items-center py-2 border-b\">\n                          <span className=\"text-gray-600\">총 전환</span>\n                          <span className=\"font-semibold\">{totalConversions.toLocaleString()}회</span>\n                        </div>\n                        <div className=\"flex justify-between items-center py-2 border-b\">\n                          <span className=\"text-gray-600\">전환율</span>\n                          <span className=\"font-semibold text-green-600\">{conversionRate.toFixed(1)}%</span>\n                        </div>\n                        <div className=\"flex justify-between items-center py-2 border-b\">\n                          <span className=\"text-gray-600\">총 매출</span>\n                          <span className=\"font-semibold text-blue-600\">₩{totalRevenue.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center py-2 border-b\">\n                          <span className=\"text-gray-600\">스캔당 평균 매출</span>\n                          <span className=\"font-semibold text-yellow-600\">₩{avgRevenuePerScan.toFixed(0)}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center py-2\">\n                          <span className=\"text-gray-600\">평균 배송 성공률</span>\n                          <span className=\"font-semibold text-purple-600\">{avgDeliveryRate.toFixed(1)}%</span>\n                        </div>\n                      </>\n                    );\n                  })()}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </>\n      ) : (\n        <Card>\n          <CardContent className=\"py-16\">\n            <div className=\"text-center\">\n              <BarChart3 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">분석 데이터가 없습니다</h3>\n              <p className=\"text-gray-500\">캠페인을 시작하고 성과가 발생하면 여기에 분석 데이터가 표시됩니다.</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":13330},"client/src/pages/CampaignsPage.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Campaign } from \"@/types\";\nimport { Plus, Clock, CheckCircle, TrendingUp } from \"lucide-react\";\nimport CampaignForm from \"@/components/forms/CampaignForm\";\nimport { useState } from \"react\";\n\nexport default function CampaignsPage() {\n  const [showCampaignForm, setShowCampaignForm] = useState(false);\n\n  const { data: campaigns, isLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-500\">데이터를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      recruiting: { label: \"모집중\", variant: \"secondary\" as const },\n      active: { label: \"진행중\", variant: \"default\" as const },\n      completed: { label: \"완료\", variant: \"outline\" as const },\n      cancelled: { label: \"취소\", variant: \"destructive\" as const },\n      draft: { label: \"임시저장\", variant: \"secondary\" as const },\n    };\n    return statusMap[status as keyof typeof statusMap] || { label: status, variant: \"secondary\" as const };\n  };\n\n  const getStatusStats = () => {\n    if (!campaigns) return { active: 0, pending: 0, completed: 0 };\n    \n    return {\n      active: campaigns.filter(c => c.status === 'active' || c.status === 'recruiting').length,\n      pending: campaigns.filter(c => c.status === 'draft').length,\n      completed: campaigns.filter(c => c.status === 'completed').length,\n    };\n  };\n\n  const stats = getStatusStats();\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">캠페인 관리</h1>\n          <p className=\"text-gray-500\">캠페인을 생성하고 관리하세요</p>\n        </div>\n        <Button onClick={() => setShowCampaignForm(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          새 캠페인 생성\n        </Button>\n      </div>\n\n      {/* Campaign Stats */}\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">진행중 캠페인</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.active}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">대기중 캠페인</CardTitle>\n            <Clock className=\"h-4 w-4 text-amber-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-amber-600\">{stats.pending}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">완료된 캠페인</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-gray-400\">{stats.completed}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Campaign Creation Form */}\n      {showCampaignForm && (\n        <Card>\n          <CardHeader>\n            <CardTitle>새 캠페인 생성</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <CampaignForm onSuccess={() => setShowCampaignForm(false)} />\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Campaigns List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>모든 캠페인</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {campaigns && campaigns.length > 0 ? (\n              campaigns.map((campaign) => {\n                const badgeInfo = getStatusBadge(campaign.status);\n                return (\n                  <div key={campaign.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-gray-900\">{campaign.title}</h4>\n                      <p className=\"text-sm text-gray-500 mt-1\">{campaign.description}</p>\n                      <div className=\"flex items-center gap-4 mt-2 text-xs text-gray-400\">\n                        <span>예산: ₩{Number(campaign.totalBudget).toLocaleString()}</span>\n                        <span>일일예산: ₩{Number(campaign.dailyBudget).toLocaleString()}</span>\n                        <span>카테고리: {campaign.category}</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant={badgeInfo.variant}>{badgeInfo.label}</Badge>\n                      <Button variant=\"outline\" size=\"sm\">\n                        관리\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })\n            ) : (\n              <p className=\"text-gray-500 text-center py-8\">생성된 캠페인이 없습니다</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5873},"client/src/pages/DashboardPage.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"@/types\";\nimport Header from \"@/components/layout/Header\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport AdminDashboard from \"@/components/dashboard/AdminDashboard\";\nimport AdvertiserDashboard from \"@/components/dashboard/AdvertiserDashboard\";\nimport PartnerDashboard from \"@/components/dashboard/PartnerDashboard\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\nexport default function DashboardPage() {\n  const [, navigate] = useLocation();\n\n  const { data: authData, isLoading, error } = useQuery<{ user: User }>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n  });\n\n  useEffect(() => {\n    if (!isLoading && (!authData?.user || error)) {\n      navigate(\"/login\");\n    }\n  }, [authData, error, isLoading, navigate]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-500\">로딩 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!authData?.user) {\n    return null; // Will redirect to login via useEffect\n  }\n\n  const { user } = authData;\n\n  const renderDashboard = () => {\n    switch (user.role) {\n      case 'admin':\n        return <AdminDashboard />;\n      case 'advertiser':\n        return <AdvertiserDashboard />;\n      case 'partner':\n        return <PartnerDashboard user={user} />;\n      default:\n        return (\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500\">알 수 없는 사용자 역할입니다.</p>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar user={user} />\n        <main className=\"flex-1 p-6\">\n          {renderDashboard()}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2123},"client/src/pages/HomePage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Search, \n  CreditCard, \n  Edit, \n  Share2, \n  Handshake, \n  TrendingUp,\n  BarChart3,\n  Users,\n  DollarSign,\n  Megaphone,\n  CheckCircle,\n  Clock,\n  Package,\n  Truck,\n  FileText,\n  Calendar\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useState } from \"react\";\n\nexport default function HomePage() {\n  const [, navigate] = useLocation();\n  const [activeTab, setActiveTab] = useState<'admin' | 'advertiser' | 'partner'>('admin');\n  const [email, setEmail] = useState('');\n\n  const features = [\n    {\n      icon: Search,\n      title: \"최적화 블로그 섭외\",\n      description: \"키워드별 최적화된 블로그를 자동으로 분류하고 매칭하여 효율적인 섭외가 가능합니다.\",\n      color: \"text-primary\"\n    },\n    {\n      icon: CreditCard,\n      title: \"자동입찰 및 결제\",\n      description: \"스마트 입찰 시스템과 안전한 결제 시스템으로 투명하고 효율적인 거래를 보장합니다.\",\n      color: \"text-green-600\"\n    },\n    {\n      icon: Edit,\n      title: \"상위노출 원고 생성\",\n      description: \"AI 기반 콘텐츠 생성 도구로 검색 최적화된 고품질 원고를 자동 생성합니다.\",\n      color: \"text-amber-600\"\n    },\n    {\n      icon: Share2,\n      title: \"자동 SNS 공유\",\n      description: \"다양한 SNS 플랫폼으로의 자동 콘텐츠 배포 및 확산 기능을 제공합니다.\",\n      color: \"text-red-600\"\n    },\n    {\n      icon: Handshake,\n      title: \"다이렉트 매칭\",\n      description: \"광고주와 카테고리별 최적화 블로그를 직접 연결하는 스마트 매칭 시스템입니다.\",\n      color: \"text-primary\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"실시간 분석\",\n      description: \"QR 코드 추적, 전환율 분석 등 실시간 성과 데이터를 제공합니다.\",\n      color: \"text-green-600\"\n    }\n  ];\n\n  const pricingPlans = [\n    {\n      name: \"스타터\",\n      price: \"99,000\",\n      description: \"개인 및 소규모 프로젝트\",\n      features: [\n        \"월 10개 캠페인\",\n        \"기본 분석 리포트\",\n        \"이메일 지원\"\n      ],\n      isPopular: false\n    },\n    {\n      name: \"프로페셔널\",\n      price: \"299,000\",\n      description: \"성장하는 비즈니스\",\n      features: [\n        \"월 50개 캠페인\",\n        \"고급 분석 및 인사이트\",\n        \"전화 지원\",\n        \"API 접근\"\n      ],\n      isPopular: true\n    },\n    {\n      name: \"엔터프라이즈\",\n      price: \"맞춤 견적\",\n      description: \"대규모 조직\",\n      features: [\n        \"무제한 캠페인\",\n        \"전담 계정 매니저\",\n        \"24/7 지원\",\n        \"커스텀 통합\"\n      ],\n      isPopular: false\n    }\n  ];\n\n  const handleEmailSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (email) {\n      navigate(\"/login\");\n    }\n  };\n\n  const scrollToDemo = () => {\n    const demoSection = document.getElementById('dashboards');\n    demoSection?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Hero Section */}\n      <section className=\"bg-white py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            프리미엄 체험단 및 기자단\n            <span className=\"text-primary block mt-2\">통합 플랫폼</span>\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto\">\n            최적화된 블로그 매칭부터 자동화된 캠페인 관리까지, \n            광고주와 파트너를 연결하는 차세대 마케팅 솔루션\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" onClick={() => navigate(\"/login\")}>\n              무료로 시작하기\n            </Button>\n            <Button variant=\"outline\" size=\"lg\" onClick={scrollToDemo}>\n              데모 보기\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-3xl font-bold text-gray-900 mb-4\">핵심 기능</h3>\n            <p className=\"text-gray-600 text-lg\">올리뷰 플랫폼의 강력한 기능들을 살펴보세요</p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className={`w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4`}>\n                      <Icon className={`text-xl ${feature.color}`} />\n                    </div>\n                    <h4 className=\"text-lg font-semibold text-gray-900 mb-2\">{feature.title}</h4>\n                    <p className=\"text-gray-600\">{feature.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Dashboard Preview Section */}\n      <section id=\"dashboards\" className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-3xl font-bold text-gray-900 mb-4\">3가지 전용 대시보드</h3>\n            <p className=\"text-gray-600 text-lg\">역할별로 최적화된 인터페이스로 효율적인 업무 환경을 제공합니다</p>\n          </div>\n\n          {/* Dashboard Tabs */}\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"bg-gray-100 p-1 rounded-lg\">\n              <button \n                className={`px-6 py-2 rounded-md text-sm font-medium transition-colors ${\n                  activeTab === 'admin' ? 'bg-white text-primary' : 'text-gray-600'\n                }`}\n                onClick={() => setActiveTab('admin')}\n              >\n                관리자 대시보드\n              </button>\n              <button \n                className={`px-6 py-2 rounded-md text-sm font-medium transition-colors ${\n                  activeTab === 'advertiser' ? 'bg-white text-primary' : 'text-gray-600'\n                }`}\n                onClick={() => setActiveTab('advertiser')}\n              >\n                광고주 대시보드\n              </button>\n              <button \n                className={`px-6 py-2 rounded-md text-sm font-medium transition-colors ${\n                  activeTab === 'partner' ? 'bg-white text-primary' : 'text-gray-600'\n                }`}\n                onClick={() => setActiveTab('partner')}\n              >\n                파트너 대시보드\n              </button>\n            </div>\n          </div>\n\n          {/* Dashboard Content */}\n          <div className=\"bg-gray-50 rounded-xl p-8\">\n            {activeTab === 'admin' && (\n              <div className=\"grid lg:grid-cols-4 gap-6\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">총 캠페인</p>\n                        <p className=\"text-2xl font-bold text-gray-900\">127</p>\n                      </div>\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <Megaphone className=\"text-primary\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">활성 파트너</p>\n                        <p className=\"text-2xl font-bold text-gray-900\">1,543</p>\n                      </div>\n                      <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                        <Users className=\"text-green-600\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">월 매출</p>\n                        <p className=\"text-2xl font-bold text-gray-900\">₩ 24.5M</p>\n                      </div>\n                      <div className=\"w-10 h-10 bg-amber-100 rounded-lg flex items-center justify-center\">\n                        <DollarSign className=\"text-amber-600\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">성공률</p>\n                        <p className=\"text-2xl font-bold text-gray-900\">94.2%</p>\n                      </div>\n                      <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                        <BarChart3 className=\"text-red-600\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {activeTab === 'advertiser' && (\n              <div className=\"grid lg:grid-cols-3 gap-6\">\n                <Card className=\"lg:col-span-2\">\n                  <CardHeader>\n                    <CardTitle>새 캠페인 생성</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <Input \n                        placeholder=\"캠페인 이름을 입력하세요\" \n                        value=\"신제품 블로그 리뷰 캠페인\"\n                        readOnly\n                        className=\"bg-gray-50\"\n                      />\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <Input \n                          placeholder=\"카테고리\" \n                          value=\"뷰티/화장품\"\n                          readOnly\n                          className=\"bg-gray-50\"\n                        />\n                        <Input \n                          placeholder=\"일일 예산\" \n                          value=\"50,000원\"\n                          readOnly\n                          className=\"bg-gray-50\"\n                        />\n                      </div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        <Badge variant=\"secondary\">20-30대</Badge>\n                        <Badge variant=\"secondary\">서울/경기</Badge>\n                        <Badge variant=\"secondary\">뷰티 관심사</Badge>\n                        <Button variant=\"outline\" size=\"sm\">+ 추가</Button>\n                      </div>\n                      <Button \n                        className=\"w-full\" \n                        onClick={() => navigate(\"/login\")}\n                      >\n                        캠페인 생성하기 (로그인 필요)\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">캠페인 현황</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <TrendingUp className=\"h-4 w-4 text-green-600 mr-2\" />\n                          <span className=\"text-sm text-gray-600\">진행중</span>\n                        </div>\n                        <span className=\"font-semibold text-green-600\">3</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 text-amber-600 mr-2\" />\n                          <span className=\"text-sm text-gray-600\">대기중</span>\n                        </div>\n                        <span className=\"font-semibold text-amber-600\">2</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-gray-400 mr-2\" />\n                          <span className=\"text-sm text-gray-600\">완료</span>\n                        </div>\n                        <span className=\"font-semibold text-gray-400\">15</span>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">이번 달 성과</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">QR 스캔수</span>\n                        <span className=\"font-semibold\">1,247</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">전환수</span>\n                        <span className=\"font-semibold\">189</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">전환율</span>\n                        <span className=\"font-semibold text-green-600\">15.2%</span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {activeTab === 'partner' && (\n              <div className=\"grid lg:grid-cols-3 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-base\">\n                      <Package className=\"h-5 w-5 text-primary mr-2\" />\n                      샘플 업체\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"border border-gray-200 rounded-lg p-3\">\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <span className=\"font-medium text-sm\">뷰티코스메틱 신제품</span>\n                          <Badge variant=\"secondary\" className=\"text-xs\">대기중</Badge>\n                        </div>\n                        <p className=\"text-xs text-gray-600 mb-2\">일일예산: 50,000원 | 기간: 7일</p>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            size=\"sm\" \n                            className=\"flex-1 text-xs\"\n                            onClick={() => navigate(\"/login\")}\n                          >\n                            지원하기\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"flex-1 text-xs\">상세보기</Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"border border-green-200 rounded-lg p-3 bg-green-50\">\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <span className=\"font-medium text-sm\">홈케어 브랜드 체험</span>\n                          <Badge className=\"text-xs bg-green-600\">진행중</Badge>\n                        </div>\n                        <p className=\"text-xs text-gray-600 mb-2\">일일예산: 30,000원 | 남은기간: 3일</p>\n                        <Button size=\"sm\" variant=\"outline\" className=\"w-full text-xs\">\n                          리뷰 작성하기\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-base\">\n                      <Truck className=\"h-5 w-5 text-primary mr-2\" />\n                      발송 계획\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <label className=\"block text-xs text-gray-600 mb-1\">희망 카테고리</label>\n                        <Input \n                          value=\"뷰티/화장품\" \n                          readOnly\n                          className=\"text-sm bg-gray-50\" \n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-xs text-gray-600 mb-1\">월 발송 가능 수량</label>\n                        <Input \n                          value=\"1,500개\" \n                          readOnly\n                          className=\"text-sm bg-gray-50\" \n                        />\n                      </div>\n                      <div className=\"text-xs text-gray-600 space-y-1\">\n                        <div className=\"flex justify-between\">\n                          <span>이번 달 진행:</span>\n                          <span className=\"font-medium\">850/1,500</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div className=\"bg-primary h-2 rounded-full\" style={{width: '57%'}}></div>\n                        </div>\n                      </div>\n                      <Button \n                        size=\"sm\" \n                        className=\"w-full\"\n                        onClick={() => navigate(\"/login\")}\n                      >\n                        용량 업데이트\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-base\">\n                      <BarChart3 className=\"h-5 w-5 text-primary mr-2\" />\n                      수익 리포트\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <label className=\"block text-xs text-gray-600 mb-1\">조회 기간</label>\n                        <Input \n                          value=\"2025년 7월\" \n                          readOnly\n                          className=\"text-sm bg-gray-50\" \n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>발송 완료</span>\n                          <span className=\"font-medium\">342건</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>완료율</span>\n                          <span className=\"font-medium text-green-600\">94.2%</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>총 수익금</span>\n                          <span className=\"font-medium text-green-600\">₩ 1,026,000</span>\n                        </div>\n                        <div className=\"pt-2 border-t\">\n                          <div className=\"flex justify-between text-xs text-gray-600\">\n                            <span>평균 건당 수익</span>\n                            <span>₩ 3,000</span>\n                          </div>\n                        </div>\n                      </div>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"w-full\"\n                        onClick={() => navigate(\"/login\")}\n                      >\n                        상세 리포트 보기\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-3xl font-bold text-gray-900 mb-4\">요금제</h3>\n            <p className=\"text-gray-600 text-lg\">귀하의 비즈니스에 맞는 최적의 플랜을 선택하세요</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {pricingPlans.map((plan, index) => (\n              <Card key={index} className={`relative ${plan.isPopular ? 'border-2 border-primary' : ''}`}>\n                {plan.isPopular && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-primary text-white\">인기</Badge>\n                  </div>\n                )}\n                <CardHeader>\n                  <CardTitle>{plan.name}</CardTitle>\n                  <p className=\"text-gray-600\">{plan.description}</p>\n                  <div className=\"mt-4\">\n                    <span className=\"text-4xl font-bold text-gray-900\">\n                      {plan.price.includes('₩') ? plan.price : `₩${plan.price}`}\n                    </span>\n                    {!plan.price.includes('맞춤') && <span className=\"text-gray-600\">/월</span>}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-3 mb-8\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-center text-sm\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600 mr-2 flex-shrink-0\" />\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                  <Button \n                    className=\"w-full\" \n                    variant={plan.isPopular ? \"default\" : \"outline\"}\n                    onClick={() => navigate(\"/login\")}\n                  >\n                    {plan.price.includes('맞춤') ? '문의하기' : '시작하기'}\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section id=\"contact\" className=\"py-20 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h3 className=\"text-3xl font-bold text-gray-900 mb-4\">지금 시작하세요</h3>\n          <p className=\"text-gray-600 text-lg mb-8\">\n            올리뷰 플랫폼으로 더 효율적인 마케팅을 경험해보세요\n          </p>\n          <form onSubmit={handleEmailSubmit} className=\"flex flex-col sm:flex-row gap-4 justify-center max-w-md mx-auto\">\n            <Input \n              type=\"email\" \n              placeholder=\"이메일 주소를 입력하세요\" \n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"flex-1\"\n            />\n            <Button type=\"submit\">\n              무료 체험 시작\n            </Button>\n          </form>\n          <p className=\"text-sm text-gray-500 mt-4\">\n            신용카드 정보 없이 14일 무료 체험 가능\n          </p>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <h4 className=\"text-xl font-bold mb-4\">올리뷰</h4>\n              <p className=\"text-gray-400 text-sm mb-4\">\n                프리미엄 체험단 및 기자단 통합 플랫폼으로 효율적인 마케팅 솔루션을 제공합니다.\n              </p>\n            </div>\n            <div>\n              <h5 className=\"font-semibold mb-4\">서비스</h5>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li><Link href=\"#features\" className=\"hover:text-white transition-colors\">캠페인 관리</Link></li>\n                <li><Link href=\"#dashboards\" className=\"hover:text-white transition-colors\">파트너 매칭</Link></li>\n                <li><Link href=\"#features\" className=\"hover:text-white transition-colors\">성과 분석</Link></li>\n                <li><Link href=\"#pricing\" className=\"hover:text-white transition-colors\">결제 시스템</Link></li>\n              </ul>\n            </div>\n            <div>\n              <h5 className=\"font-semibold mb-4\">지원</h5>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">도움말 센터</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">API 문서</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">개발자 가이드</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">고객 지원</a></li>\n              </ul>\n            </div>\n            <div>\n              <h5 className=\"font-semibold mb-4\">회사</h5>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">회사 소개</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">채용 정보</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">개인정보처리방침</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">이용약관</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-sm text-gray-400\">\n            <p>&copy; 2024 올리뷰(AllReview). All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":27459},"client/src/pages/LoginPage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { User } from \"@/types\";\nimport { useEffect } from \"react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"올바른 이메일을 입력해주세요\"),\n  password: z.string().min(6, \"비밀번호는 최소 6자 이상이어야 합니다\"),\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(\"올바른 이메일을 입력해주세요\"),\n  password: z.string().min(6, \"비밀번호는 최소 6자 이상이어야 합니다\"),\n  confirmPassword: z.string(),\n  role: z.enum([\"admin\", \"advertiser\", \"partner\"], {\n    required_error: \"역할을 선택해주세요\",\n  }),\n  companyName: z.string().min(1, \"회사명을 입력해주세요\"),\n  contactPerson: z.string().min(1, \"담당자명을 입력해주세요\"),\n  phoneNumber: z.string().min(1, \"연락처를 입력해주세요\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"비밀번호가 일치하지 않습니다\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function LoginPage() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  // Check if user is already logged in\n  const { data: authData } = useQuery<{ user: User }>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (authData?.user) {\n      navigate(\"/dashboard\");\n    }\n  }, [authData, navigate]);\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: (data: LoginFormData) => apiRequest(\"POST\", \"/api/auth/login\", data),\n    onSuccess: () => {\n      queryClient.clear(); // Clear all cached data\n      setTimeout(() => {\n        navigate(\"/dashboard\");\n        toast({\n          title: \"로그인 성공\",\n          description: \"환영합니다!\",\n        });\n      }, 100);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"로그인 실패\",\n        description: error.message || \"로그인 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: (data: RegisterFormData) => apiRequest(\"POST\", \"/api/auth/register\", data),\n    onSuccess: () => {\n      queryClient.clear(); // Clear all cached data\n      setTimeout(() => {\n        navigate(\"/dashboard\");\n        toast({\n          title: \"회원가입 성공\",\n          description: \"계정이 성공적으로 생성되었습니다!\",\n        });\n      }, 100);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"회원가입 실패\",\n        description: error.message || \"회원가입 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLoginSubmit = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegisterSubmit = (data: RegisterFormData) => {\n    const { confirmPassword, ...submitData } = data;\n    registerMutation.mutate(submitData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mb-4\">\n            <h1 className=\"text-2xl font-bold text-primary\">올리뷰</h1>\n            <p className=\"text-xs text-gray-500\">AllReview Platform</p>\n          </div>\n          <CardTitle>계정 로그인</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\">로그인</TabsTrigger>\n              <TabsTrigger value=\"register\">회원가입</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"login\">\n              <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"email\">이메일</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    {...loginForm.register(\"email\")}\n                    placeholder=\"이메일을 입력하세요\"\n                  />\n                  {loginForm.formState.errors.email && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {loginForm.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"password\">비밀번호</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    {...loginForm.register(\"password\")}\n                    placeholder=\"비밀번호를 입력하세요\"\n                  />\n                  {loginForm.formState.errors.password && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {loginForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? \"로그인 중...\" : \"로그인\"}\n                </Button>\n              </form>\n            </TabsContent>\n            \n            <TabsContent value=\"register\">\n              <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"register-email\">이메일</Label>\n                  <Input\n                    id=\"register-email\"\n                    type=\"email\"\n                    {...registerForm.register(\"email\")}\n                    placeholder=\"이메일을 입력하세요\"\n                  />\n                  {registerForm.formState.errors.email && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {registerForm.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"register-password\">비밀번호</Label>\n                  <Input\n                    id=\"register-password\"\n                    type=\"password\"\n                    {...registerForm.register(\"password\")}\n                    placeholder=\"비밀번호를 입력하세요\"\n                  />\n                  {registerForm.formState.errors.password && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {registerForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"confirm-password\">비밀번호 확인</Label>\n                  <Input\n                    id=\"confirm-password\"\n                    type=\"password\"\n                    {...registerForm.register(\"confirmPassword\")}\n                    placeholder=\"비밀번호를 다시 입력하세요\"\n                  />\n                  {registerForm.formState.errors.confirmPassword && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {registerForm.formState.errors.confirmPassword.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"role\">역할</Label>\n                  <Select onValueChange={(value) => registerForm.setValue(\"role\", value as \"admin\" | \"advertiser\" | \"partner\")}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"역할을 선택하세요\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"admin\">관리자</SelectItem>\n                      <SelectItem value=\"advertiser\">광고주</SelectItem>\n                      <SelectItem value=\"partner\">파트너</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {registerForm.formState.errors.role && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {registerForm.formState.errors.role.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"company-name\">회사명</Label>\n                  <Input\n                    id=\"company-name\"\n                    {...registerForm.register(\"companyName\")}\n                    placeholder=\"회사명을 입력하세요\"\n                  />\n                  {registerForm.formState.errors.companyName && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {registerForm.formState.errors.companyName.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"contact-person\">담당자명</Label>\n                  <Input\n                    id=\"contact-person\"\n                    {...registerForm.register(\"contactPerson\")}\n                    placeholder=\"담당자명을 입력하세요\"\n                  />\n                  {registerForm.formState.errors.contactPerson && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {registerForm.formState.errors.contactPerson.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"phone-number\">연락처</Label>\n                  <Input\n                    id=\"phone-number\"\n                    {...registerForm.register(\"phoneNumber\")}\n                    placeholder=\"연락처를 입력하세요\"\n                  />\n                  {registerForm.formState.errors.phoneNumber && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {registerForm.formState.errors.phoneNumber.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={registerMutation.isPending}\n                >\n                  {registerMutation.isPending ? \"가입 중...\" : \"회원가입\"}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n\n          <div className=\"mt-6 text-center\">\n            <Button variant=\"ghost\" onClick={() => navigate(\"/\")}>\n              홈으로 돌아가기\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11516},"client/src/pages/PaymentsPage.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { CreditCard, DollarSign, Receipt, Plus, CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface Payment {\n  id: number;\n  campaignId: number;\n  advertiserId: number;\n  amount: string;\n  status: string;\n  paymentMethod: string;\n  transactionId?: string;\n  createdAt: string;\n  processedAt?: string;\n}\n\nexport default function PaymentsPage() {\n  const [showPaymentForm, setShowPaymentForm] = useState(false);\n\n  const { data: payments, isLoading } = useQuery<Payment[]>({\n    queryKey: [\"/api/payments\"],\n  });\n\n  const paymentMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      const response = await fetch('/api/payments', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(paymentData),\n      });\n      if (!response.ok) throw new Error('Payment failed');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      setShowPaymentForm(false);\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-500\">결제 내역을 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      pending: { label: \"대기중\", variant: \"secondary\" as const, icon: Clock },\n      completed: { label: \"완료\", variant: \"default\" as const, icon: CheckCircle },\n      failed: { label: \"실패\", variant: \"destructive\" as const, icon: XCircle },\n      refunded: { label: \"환불\", variant: \"outline\" as const, icon: Receipt },\n    };\n    return statusMap[status as keyof typeof statusMap] || { label: status, variant: \"secondary\" as const, icon: Clock };\n  };\n\n  const getPaymentMethodBadge = (method: string) => {\n    const methodMap = {\n      card: { label: \"카드\", color: \"bg-blue-100 text-blue-700\" },\n      bank_transfer: { label: \"계좌이체\", color: \"bg-green-100 text-green-700\" },\n      virtual_account: { label: \"가상계좌\", color: \"bg-purple-100 text-purple-700\" },\n    };\n    return methodMap[method as keyof typeof methodMap] || { label: method, color: \"bg-gray-100 text-gray-700\" };\n  };\n\n  const getTotalStats = () => {\n    if (!payments) return { total: 0, completed: 0, pending: 0, failed: 0 };\n    \n    return {\n      total: payments.reduce((sum, payment) => sum + Number(payment.amount), 0),\n      completed: payments.filter(p => p.status === 'completed').reduce((sum, payment) => sum + Number(payment.amount), 0),\n      pending: payments.filter(p => p.status === 'pending').reduce((sum, payment) => sum + Number(payment.amount), 0),\n      failed: payments.filter(p => p.status === 'failed').length,\n    };\n  };\n\n  const stats = getTotalStats();\n\n  const handlePayment = (formData: FormData) => {\n    const paymentData = {\n      campaignId: parseInt(formData.get('campaignId') as string),\n      amount: formData.get('amount') as string,\n      paymentMethod: formData.get('paymentMethod') as string,\n    };\n    paymentMutation.mutate(paymentData);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">결제 관리</h1>\n          <p className=\"text-gray-500\">결제 내역을 확인하고 새로운 결제를 진행하세요</p>\n        </div>\n        <Button onClick={() => setShowPaymentForm(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          새 결제\n        </Button>\n      </div>\n\n      {/* Payment Stats */}\n      <div className=\"grid md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">총 결제액</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">₩{stats.total.toLocaleString()}</div>\n            <p className=\"text-xs text-gray-500 mt-1\">누적 결제 금액</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">완료된 결제</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">₩{stats.completed.toLocaleString()}</div>\n            <p className=\"text-xs text-gray-500 mt-1\">성공 결제 금액</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">대기중 결제</CardTitle>\n            <Clock className=\"h-4 w-4 text-amber-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-amber-600\">₩{stats.pending.toLocaleString()}</div>\n            <p className=\"text-xs text-gray-500 mt-1\">처리 대기 금액</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">실패한 결제</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{stats.failed}</div>\n            <p className=\"text-xs text-gray-500 mt-1\">실패 건수</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Payment Form */}\n      {showPaymentForm && (\n        <Card>\n          <CardHeader>\n            <CardTitle>새 결제 등록</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form \n              onSubmit={(e) => {\n                e.preventDefault();\n                handlePayment(new FormData(e.currentTarget));\n              }}\n              className=\"space-y-4\"\n            >\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    캠페인 ID\n                  </label>\n                  <input\n                    name=\"campaignId\"\n                    type=\"number\"\n                    required\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"캠페인 ID를 입력하세요\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    결제 금액\n                  </label>\n                  <input\n                    name=\"amount\"\n                    type=\"number\"\n                    required\n                    min=\"1000\"\n                    step=\"1000\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"결제 금액을 입력하세요\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  결제 방법\n                </label>\n                <select\n                  name=\"paymentMethod\"\n                  required\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"\">결제 방법을 선택하세요</option>\n                  <option value=\"card\">신용카드</option>\n                  <option value=\"bank_transfer\">계좌이체</option>\n                  <option value=\"virtual_account\">가상계좌</option>\n                </select>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button \n                  type=\"submit\" \n                  disabled={paymentMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {paymentMutation.isPending ? \"처리중...\" : \"결제 진행\"}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowPaymentForm(false)}\n                >\n                  취소\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Payments List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>결제 내역</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {payments && payments.length > 0 ? (\n              payments.map((payment) => {\n                const statusInfo = getStatusBadge(payment.status);\n                const methodInfo = getPaymentMethodBadge(payment.paymentMethod);\n                const StatusIcon = statusInfo.icon;\n                \n                return (\n                  <div key={payment.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <StatusIcon className=\"h-4 w-4\" />\n                        <h4 className=\"font-medium text-gray-900\">\n                          캠페인 #{payment.campaignId} 결제\n                        </h4>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${methodInfo.color}`}>\n                          {methodInfo.label}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                        <span>결제일: {new Date(payment.createdAt).toLocaleDateString('ko-KR')}</span>\n                        {payment.processedAt && (\n                          <span>처리일: {new Date(payment.processedAt).toLocaleDateString('ko-KR')}</span>\n                        )}\n                        {payment.transactionId && (\n                          <span>거래번호: {payment.transactionId}</span>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"text-right\">\n                        <div className=\"text-xl font-bold text-gray-900\">\n                          ₩{Number(payment.amount).toLocaleString()}\n                        </div>\n                        <Badge variant={statusInfo.variant}>{statusInfo.label}</Badge>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            ) : (\n              <div className=\"text-center py-12\">\n                <Receipt className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">결제 내역이 없습니다</h3>\n                <p className=\"text-gray-500 mb-4\">첫 번째 결제를 진행해보세요.</p>\n                <Button onClick={() => setShowPaymentForm(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  새 결제\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12159},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface User {\n  id: number;\n  email: string;\n  role: 'admin' | 'advertiser' | 'partner';\n  companyName?: string;\n  contactPerson?: string;\n  phoneNumber?: string;\n}\n\nexport interface Campaign {\n  id: number;\n  advertiserId: number;\n  title: string;\n  description?: string;\n  category: string;\n  dailyBudget: string;\n  totalBudget: string;\n  targetFilters?: any;\n  recruitmentStartDate: string;\n  recruitmentEndDate: string;\n  campaignStartDate: string;\n  campaignEndDate: string;\n  status: 'draft' | 'recruiting' | 'active' | 'completed' | 'cancelled';\n  maxPartners: number;\n  selectedPartners: number;\n  qrCodeUrl?: string;\n  productUrl?: string;\n  createdAt: string;\n}\n\nexport interface CampaignApplication {\n  id: number;\n  campaignId: number;\n  partnerId: number;\n  status: 'pending' | 'approved' | 'rejected';\n  applicationMessage?: string;\n  appliedAt: string;\n  reviewedAt?: string;\n  reviewedBy?: number;\n}\n\nexport interface SampleProduct {\n  id: number;\n  campaignId: number;\n  partnerId: number;\n  productName: string;\n  quantity: number;\n  status: 'pending' | 'approved' | 'shipped' | 'delivered';\n  requestedAt: string;\n  approvedAt?: string;\n  shippedAt?: string;\n  trackingNumber?: string;\n}\n\nexport interface ShippingRecord {\n  id: number;\n  campaignId: number;\n  partnerId: number;\n  shippingDate: string;\n  trackingNumber: string;\n  productName: string;\n  recipientInfo?: any;\n  memo?: string;\n  status: 'shipped' | 'delivered' | 'failed';\n  createdAt: string;\n}\n\nexport interface PerformanceMetric {\n  id: number;\n  campaignId: number;\n  partnerId?: number;\n  date: string;\n  qrScans: number;\n  conversions: number;\n  revenue: string;\n  deliveryRate: string;\n  createdAt: string;\n}\n\nexport interface AdminStats {\n  totalCampaigns: number;\n  activePartners: number;\n  monthlyRevenue: string;\n  successRate: string;\n}\n\nexport const CATEGORIES = [\n  \"뷰티/화장품\",\n  \"식품/건강\",\n  \"패션/의류\",\n  \"디지털/가전\",\n  \"생활용품\",\n  \"스포츠/레저\",\n  \"육아/완구\",\n  \"반려동물\",\n  \"도서/문구\",\n  \"기타\"\n];\n\nexport const AGE_GROUPS = [\n  \"10대\",\n  \"20대\",\n  \"30대\",\n  \"40대\",\n  \"50대\",\n  \"60대 이상\"\n];\n\nexport const REGIONS = [\n  \"서울\",\n  \"경기\",\n  \"인천\",\n  \"부산\",\n  \"대구\",\n  \"광주\",\n  \"대전\",\n  \"울산\",\n  \"세종\",\n  \"강원\",\n  \"충북\",\n  \"충남\",\n  \"전북\",\n  \"전남\",\n  \"경북\",\n  \"경남\",\n  \"제주\"\n];\n","size_bytes":2402},"client/src/components/dashboard/AdminDashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AdminStats, Campaign } from \"@/types\";\nimport { Megaphone, Users, DollarSign, TrendingUp, Eye } from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const { data: stats, isLoading: statsLoading } = useQuery<AdminStats>({\n    queryKey: [\"/api/admin/stats\"],\n  });\n\n  const { data: campaigns, isLoading: campaignsLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  if (statsLoading || campaignsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-500\">데이터를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      recruiting: { label: \"모집중\", variant: \"secondary\" as const },\n      active: { label: \"진행중\", variant: \"default\" as const },\n      completed: { label: \"완료\", variant: \"outline\" as const },\n      cancelled: { label: \"취소\", variant: \"destructive\" as const },\n      draft: { label: \"임시저장\", variant: \"secondary\" as const },\n    };\n    return statusMap[status as keyof typeof statusMap] || { label: status, variant: \"secondary\" as const };\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900\">관리자 대시보드</h1>\n        <p className=\"text-gray-500\">전체 플랫폼 현황을 관리하고 모니터링하세요</p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">총 캠페인</CardTitle>\n            <Megaphone className=\"h-4 w-4 text-primary\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalCampaigns || 0}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">활성 파트너</CardTitle>\n            <Users className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.activePartners || 0}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">월 매출</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-amber-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">₩ {Number(stats?.monthlyRevenue || 0).toLocaleString()}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">성공률</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.successRate || 0}%</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Campaign Management Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>캠페인 관리</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {campaigns && campaigns.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>캠페인명</TableHead>\n                  <TableHead>광고주</TableHead>\n                  <TableHead>상태</TableHead>\n                  <TableHead>예산</TableHead>\n                  <TableHead>관리</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {campaigns.map((campaign) => {\n                  const statusInfo = getStatusBadge(campaign.status);\n                  return (\n                    <TableRow key={campaign.id}>\n                      <TableCell className=\"font-medium\">{campaign.title}</TableCell>\n                      <TableCell>{campaign.advertiserId}</TableCell>\n                      <TableCell>\n                        <Badge variant={statusInfo.variant}>{statusInfo.label}</Badge>\n                      </TableCell>\n                      <TableCell>₩ {Number(campaign.totalBudget).toLocaleString()}</TableCell>\n                      <TableCell>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"h-4 w-4 mr-2\" />\n                          상세보기\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500\">등록된 캠페인이 없습니다.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5628},"client/src/components/dashboard/AdvertiserDashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Campaign } from \"@/types\";\nimport { TrendingUp, Clock, CheckCircle, DollarSign, BarChart3, CreditCard, ArrowRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function AdvertiserDashboard() {\n  const { data: campaigns, isLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  // Fetch performance metrics for quick stats\n  const { data: performanceData } = useQuery({\n    queryKey: [\"/api/performance-metrics\"],\n    queryFn: async () => {\n      if (!campaigns?.[0]?.id) return [];\n      const params = new URLSearchParams({ campaignId: campaigns[0].id.toString() });\n      const response = await fetch(`/api/performance-metrics?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch performance data');\n      return response.json();\n    },\n    enabled: !!campaigns?.[0]?.id,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-500\">데이터를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusStats = () => {\n    if (!campaigns) return { active: 0, pending: 0, completed: 0 };\n    \n    return {\n      active: campaigns.filter(c => c.status === 'active' || c.status === 'recruiting').length,\n      pending: campaigns.filter(c => c.status === 'draft').length,\n      completed: campaigns.filter(c => c.status === 'completed').length,\n    };\n  };\n\n  const stats = getStatusStats();\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900\">광고주 대시보드</h1>\n        <p className=\"text-gray-500\">전체 현황을 한눈에 확인하고 빠르게 접근하세요</p>\n      </div>\n\n      {/* Quick Navigation Cards */}\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        <Link href=\"/dashboard/campaigns\">\n          <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">캠페인 관리</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">{campaigns?.length || 0}</div>\n              <p className=\"text-xs text-gray-500 mt-1\">총 캠페인 수</p>\n              <div className=\"flex items-center mt-2 text-sm text-blue-600\">\n                <span>캠페인 관리하기</span>\n                <ArrowRight className=\"h-4 w-4 ml-1\" />\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n\n        <Link href=\"/dashboard/analytics\">\n          <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">성과 분석</CardTitle>\n              <BarChart3 className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {performanceData ? performanceData.reduce((sum: number, metric: any) => sum + metric.qrScans, 0).toLocaleString() : '0'}\n              </div>\n              <p className=\"text-xs text-gray-500 mt-1\">총 QR 스캔</p>\n              <div className=\"flex items-center mt-2 text-sm text-green-600\">\n                <span>상세 분석 보기</span>\n                <ArrowRight className=\"h-4 w-4 ml-1\" />\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n\n        <Link href=\"/dashboard/billing\">\n          <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">결제 관리</CardTitle>\n              <CreditCard className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600\">₩800K</div>\n              <p className=\"text-xs text-gray-500 mt-1\">완료된 결제</p>\n              <div className=\"flex items-center mt-2 text-sm text-purple-600\">\n                <span>결제 내역 보기</span>\n                <ArrowRight className=\"h-4 w-4 ml-1\" />\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">진행중 캠페인</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.active}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">대기중 캠페인</CardTitle>\n            <Clock className=\"h-4 w-4 text-amber-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-amber-600\">{stats.pending}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">완료된 캠페인</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-gray-400\">{stats.completed}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">총 매출</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              ₩{performanceData ? \n                performanceData.reduce((sum: number, metric: any) => sum + Number(metric.revenue), 0).toLocaleString() : \n                '0'\n              }\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Performance Summary */}\n      {performanceData && performanceData.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>이번 달 성과 요약</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-4 gap-4\">\n              {(() => {\n                const totalScans = performanceData.reduce((sum: number, metric: any) => sum + metric.qrScans, 0);\n                const totalConversions = performanceData.reduce((sum: number, metric: any) => sum + metric.conversions, 0);\n                const totalRevenue = performanceData.reduce((sum: number, metric: any) => sum + Number(metric.revenue), 0);\n                const conversionRate = totalScans > 0 ? (totalConversions / totalScans * 100) : 0;\n\n                return (\n                  <>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{totalScans.toLocaleString()}</div>\n                      <div className=\"text-sm text-gray-500\">QR 스캔</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">{totalConversions.toLocaleString()}</div>\n                      <div className=\"text-sm text-gray-500\">전환</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-purple-600\">{conversionRate.toFixed(1)}%</div>\n                      <div className=\"text-sm text-gray-500\">전환율</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-yellow-600\">₩{totalRevenue.toLocaleString()}</div>\n                      <div className=\"text-sm text-gray-500\">매출</div>\n                    </div>\n                  </>\n                );\n              })()}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":8930},"client/src/components/dashboard/PartnerDashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Campaign, SampleProduct, User } from \"@/types\";\nimport { Package, Truck, FileText, TrendingUp, Calendar } from \"lucide-react\";\nimport { useState } from \"react\";\nimport ShippingForm from \"@/components/forms/ShippingForm\";\n\ninterface PartnerDashboardProps {\n  user: User;\n}\n\nexport default function PartnerDashboard({ user }: PartnerDashboardProps) {\n  const [selectedDate, setSelectedDate] = useState<string>(new Date().toISOString().split('T')[0]);\n\n  const { data: campaigns, isLoading: campaignsLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  const { data: sampleProducts, isLoading: samplesLoading } = useQuery<SampleProduct[]>({\n    queryKey: [\"/api/sample-products\"],\n  });\n\n  if (campaignsLoading || samplesLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-500\">데이터를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      pending: { label: \"대기중\", variant: \"secondary\" as const },\n      approved: { label: \"승인\", variant: \"default\" as const },\n      shipped: { label: \"발송완료\", variant: \"outline\" as const },\n      delivered: { label: \"배송완료\", variant: \"destructive\" as const },\n    };\n    return statusMap[status as keyof typeof statusMap] || { label: status, variant: \"secondary\" as const };\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">\n            파트너 : {user.companyName || user.email}\n          </h1>\n          <p className=\"text-gray-500\">파트너 대시보드에 오신 것을 환영합니다</p>\n        </div>\n        <Button>\n          캠페인 신청하기\n        </Button>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Sample Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-base\">\n              <Package className=\"h-5 w-5 text-primary mr-2\" />\n              샘플 업체\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {sampleProducts && sampleProducts.length > 0 ? (\n              <div className=\"space-y-3\">\n                {sampleProducts.slice(0, 3).map((sample) => {\n                  const statusInfo = getStatusBadge(sample.status);\n                  return (\n                    <div key={sample.id} className=\"border border-gray-200 rounded-lg p-3\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"font-medium text-sm\">{sample.productName}</span>\n                        <Badge variant={statusInfo.variant} className=\"text-xs\">\n                          {statusInfo.label}\n                        </Badge>\n                      </div>\n                      {sample.status === 'pending' && (\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" className=\"flex-1 text-xs\">\n                            승인\n                          </Button>\n                          <Button size=\"sm\" variant=\"secondary\" className=\"flex-1 text-xs\">\n                            거절\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"text-center py-4\">\n                <p className=\"text-sm text-gray-500\">요청된 샘플이 없습니다.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Shipping Plan */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-base\">\n              <Truck className=\"h-5 w-5 text-primary mr-2\" />\n              발송 계획\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"block text-xs text-gray-600 mb-1\">희망 카테고리</label>\n                <select className=\"w-full text-sm border border-gray-300 rounded px-2 py-1\">\n                  <option>뷰티/화장품</option>\n                  <option>식품/건강</option>\n                  <option>패션/의류</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-xs text-gray-600 mb-1\">예상 수량</label>\n                <input \n                  type=\"number\" \n                  placeholder=\"1000\" \n                  className=\"w-full text-sm border border-gray-300 rounded px-2 py-1\" \n                />\n              </div>\n              <Button size=\"sm\" className=\"w-full\">\n                계획 등록\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Revenue Report */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-base\">\n              <TrendingUp className=\"h-5 w-5 text-primary mr-2\" />\n              수익 리포트\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"block text-xs text-gray-600 mb-1\">기간 선택</label>\n                <input \n                  type=\"date\" \n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  className=\"w-full text-sm border border-gray-300 rounded px-2 py-1\" \n                />\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>발송 완료</span>\n                  <span className=\"font-medium\">0건</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>수익금</span>\n                  <span className=\"font-medium text-green-600\">₩ 0</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Available Campaigns */}\n      <Card>\n        <CardHeader>\n          <CardTitle>신청 가능한 캠페인</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {campaigns && campaigns.length > 0 ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {campaigns\n                .filter(campaign => campaign.status === 'recruiting')\n                .map((campaign) => (\n                  <div key={campaign.id} className=\"border rounded-lg p-4\">\n                    <h3 className=\"font-semibold mb-2\">{campaign.title}</h3>\n                    <p className=\"text-sm text-gray-600 mb-3\">{campaign.description}</p>\n                    <div className=\"space-y-1 text-xs text-gray-500 mb-3\">\n                      <div>카테고리: {campaign.category}</div>\n                      <div>예산: ₩ {Number(campaign.dailyBudget).toLocaleString()}/일</div>\n                      <div>모집마감: {new Date(campaign.recruitmentEndDate).toLocaleDateString()}</div>\n                    </div>\n                    <Button size=\"sm\" className=\"w-full\">\n                      신청하기\n                    </Button>\n                  </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500\">현재 신청 가능한 캠페인이 없습니다.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Shipping Registration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <FileText className=\"h-5 w-5 text-primary mr-2\" />\n            발송 등록\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ShippingForm />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8451},"client/src/components/forms/CampaignForm.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CATEGORIES, AGE_GROUPS, REGIONS } from \"@/types\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X } from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst campaignSchema = z.object({\n  title: z.string().min(1, \"캠페인명을 입력해주세요\"),\n  description: z.string().optional(),\n  category: z.string().min(1, \"카테고리를 선택해주세요\"),\n  dailyBudget: z.string().min(1, \"일일 예산을 입력해주세요\"),\n  totalBudget: z.string().min(1, \"총 예산을 입력해주세요\"),\n  recruitmentStartDate: z.string().min(1, \"모집 시작일을 선택해주세요\"),\n  recruitmentEndDate: z.string().min(1, \"모집 마감일을 선택해주세요\"),\n  campaignStartDate: z.string().min(1, \"캠페인 시작일을 선택해주세요\"),\n  campaignEndDate: z.string().min(1, \"캠페인 종료일을 선택해주세요\"),\n  maxPartners: z.number().min(1, \"최대 파트너 수를 입력해주세요\"),\n  productUrl: z.string().url(\"올바른 URL을 입력해주세요\").optional().or(z.literal(\"\")),\n});\n\ntype CampaignFormData = z.infer<typeof campaignSchema>;\n\ninterface CampaignFormProps {\n  onSuccess?: () => void;\n}\n\nexport default function CampaignForm({ onSuccess }: CampaignFormProps) {\n  const { toast } = useToast();\n  const [selectedAges, setSelectedAges] = useState<string[]>([]);\n  const [selectedRegions, setSelectedRegions] = useState<string[]>([]);\n  const [selectedInterests, setSelectedInterests] = useState<string[]>([]);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch,\n    reset,\n  } = useForm<CampaignFormData>({\n    resolver: zodResolver(campaignSchema),\n    defaultValues: {\n      maxPartners: 10,\n    },\n  });\n\n  const createCampaignMutation = useMutation({\n    mutationFn: (data: CampaignFormData & { targetFilters: any }) =>\n      apiRequest(\"POST\", \"/api/campaigns\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({\n        title: \"캠페인 생성 완료\",\n        description: \"새로운 캠페인이 성공적으로 생성되었습니다.\",\n      });\n      reset();\n      setSelectedAges([]);\n      setSelectedRegions([]);\n      setSelectedInterests([]);\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: \"캠페인 생성 실패\",\n        description: \"캠페인 생성 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CampaignFormData) => {\n    const targetFilters = {\n      ages: selectedAges,\n      regions: selectedRegions,\n      interests: selectedInterests,\n    };\n\n    createCampaignMutation.mutate({\n      ...data,\n      targetFilters,\n      dailyBudget: data.dailyBudget.replace(/,/g, ''),\n      totalBudget: data.totalBudget.replace(/,/g, ''),\n      recruitmentStartDate: new Date(data.recruitmentStartDate).toISOString(),\n      recruitmentEndDate: new Date(data.recruitmentEndDate).toISOString(),\n      campaignStartDate: new Date(data.campaignStartDate).toISOString(),\n      campaignEndDate: new Date(data.campaignEndDate).toISOString(),\n      status: 'draft',\n    });\n  };\n\n  const handleAgeToggle = (age: string) => {\n    setSelectedAges(prev => \n      prev.includes(age) ? prev.filter(a => a !== age) : [...prev, age]\n    );\n  };\n\n  const handleRegionToggle = (region: string) => {\n    setSelectedRegions(prev => \n      prev.includes(region) ? prev.filter(r => r !== region) : [...prev, region]\n    );\n  };\n\n  const handleInterestToggle = (interest: string) => {\n    setSelectedInterests(prev => \n      prev.includes(interest) ? prev.filter(i => i !== interest) : [...prev, interest]\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"title\">캠페인명 *</Label>\n          <Input\n            id=\"title\"\n            {...register(\"title\")}\n            placeholder=\"캠페인 이름을 입력하세요\"\n          />\n          {errors.title && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.title.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"category\">카테고리 *</Label>\n          <Select onValueChange={(value) => setValue(\"category\", value)}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"카테고리 선택\" />\n            </SelectTrigger>\n            <SelectContent>\n              {CATEGORIES.map((category) => (\n                <SelectItem key={category} value={category}>\n                  {category}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors.category && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.category.message}</p>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <Label htmlFor=\"description\">캠페인 설명</Label>\n        <Textarea\n          id=\"description\"\n          {...register(\"description\")}\n          placeholder=\"캠페인에 대한 상세 설명을 입력하세요\"\n          rows={3}\n        />\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"dailyBudget\">일일 예산 *</Label>\n          <Input\n            id=\"dailyBudget\"\n            {...register(\"dailyBudget\")}\n            placeholder=\"100,000\"\n            type=\"text\"\n          />\n          {errors.dailyBudget && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.dailyBudget.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"totalBudget\">총 예산 *</Label>\n          <Input\n            id=\"totalBudget\"\n            {...register(\"totalBudget\")}\n            placeholder=\"1,000,000\"\n            type=\"text\"\n          />\n          {errors.totalBudget && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.totalBudget.message}</p>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <Label htmlFor=\"maxPartners\">최대 파트너 수</Label>\n        <Input\n          id=\"maxPartners\"\n          {...register(\"maxPartners\", { valueAsNumber: true })}\n          type=\"number\"\n          min={1}\n        />\n        {errors.maxPartners && (\n          <p className=\"text-sm text-red-600 mt-1\">{errors.maxPartners.message}</p>\n        )}\n      </div>\n\n      <div>\n        <Label htmlFor=\"productUrl\">상품 URL</Label>\n        <Input\n          id=\"productUrl\"\n          {...register(\"productUrl\")}\n          placeholder=\"https://example.com/product\"\n          type=\"url\"\n        />\n        {errors.productUrl && (\n          <p className=\"text-sm text-red-600 mt-1\">{errors.productUrl.message}</p>\n        )}\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"recruitmentStartDate\">모집 시작일 *</Label>\n          <Input\n            id=\"recruitmentStartDate\"\n            {...register(\"recruitmentStartDate\")}\n            type=\"date\"\n          />\n          {errors.recruitmentStartDate && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.recruitmentStartDate.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"recruitmentEndDate\">모집 마감일 *</Label>\n          <Input\n            id=\"recruitmentEndDate\"\n            {...register(\"recruitmentEndDate\")}\n            type=\"date\"\n          />\n          {errors.recruitmentEndDate && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.recruitmentEndDate.message}</p>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"campaignStartDate\">캠페인 시작일 *</Label>\n          <Input\n            id=\"campaignStartDate\"\n            {...register(\"campaignStartDate\")}\n            type=\"date\"\n          />\n          {errors.campaignStartDate && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.campaignStartDate.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"campaignEndDate\">캠페인 종료일 *</Label>\n          <Input\n            id=\"campaignEndDate\"\n            {...register(\"campaignEndDate\")}\n            type=\"date\"\n          />\n          {errors.campaignEndDate && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.campaignEndDate.message}</p>\n          )}\n        </div>\n      </div>\n\n      {/* Target Filters */}\n      <div className=\"space-y-4\">\n        <Label>타겟 필터</Label>\n        \n        {/* Age Groups */}\n        <div>\n          <Label className=\"text-sm\">연령대 (중복 선택 가능)</Label>\n          <div className=\"flex flex-wrap gap-2 mt-2\">\n            {selectedAges.map((age) => (\n              <Badge key={age} variant=\"default\" className=\"cursor-pointer\" onClick={() => handleAgeToggle(age)}>\n                {age}\n                <X className=\"h-3 w-3 ml-1\" />\n              </Badge>\n            ))}\n            <Select onValueChange={handleAgeToggle}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"+ 추가\" />\n              </SelectTrigger>\n              <SelectContent>\n                {AGE_GROUPS.filter(age => !selectedAges.includes(age)).map((age) => (\n                  <SelectItem key={age} value={age}>\n                    {age}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Regions */}\n        <div>\n          <Label className=\"text-sm\">지역 (중복 선택 가능)</Label>\n          <div className=\"flex flex-wrap gap-2 mt-2\">\n            {selectedRegions.map((region) => (\n              <Badge key={region} variant=\"default\" className=\"cursor-pointer\" onClick={() => handleRegionToggle(region)}>\n                {region}\n                <X className=\"h-3 w-3 ml-1\" />\n              </Badge>\n            ))}\n            <Select onValueChange={handleRegionToggle}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"+ 추가\" />\n              </SelectTrigger>\n              <SelectContent>\n                {REGIONS.filter(region => !selectedRegions.includes(region)).map((region) => (\n                  <SelectItem key={region} value={region}>\n                    {region}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Interests */}\n        <div>\n          <Label className=\"text-sm\">관심사 (중복 선택 가능)</Label>\n          <div className=\"flex flex-wrap gap-2 mt-2\">\n            {selectedInterests.map((interest) => (\n              <Badge key={interest} variant=\"default\" className=\"cursor-pointer\" onClick={() => handleInterestToggle(interest)}>\n                {interest}\n                <X className=\"h-3 w-3 ml-1\" />\n              </Badge>\n            ))}\n            <Select onValueChange={handleInterestToggle}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"+ 추가\" />\n              </SelectTrigger>\n              <SelectContent>\n                {CATEGORIES.filter(category => !selectedInterests.includes(category)).map((category) => (\n                  <SelectItem key={category} value={category}>\n                    {category}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n\n      <Button \n        type=\"submit\" \n        className=\"w-full\" \n        disabled={createCampaignMutation.isPending}\n      >\n        {createCampaignMutation.isPending ? \"생성 중...\" : \"캠페인 생성하기\"}\n      </Button>\n    </form>\n  );\n}\n","size_bytes":12433},"client/src/components/forms/ShippingForm.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Campaign } from \"@/types\";\nimport { Upload, Download } from \"lucide-react\";\nimport ExcelUpload from \"@/components/ui/excel-upload\";\n\nconst shippingSchema = z.object({\n  campaignId: z.number().min(1, \"캠페인을 선택해주세요\"),\n  shippingDate: z.string().min(1, \"발송일을 선택해주세요\"),\n  trackingNumber: z.string().min(1, \"운송장 번호를 입력해주세요\"),\n  productName: z.string().min(1, \"상품명을 입력해주세요\"),\n  memo: z.string().optional(),\n});\n\ntype ShippingFormData = z.infer<typeof shippingSchema>;\n\nexport default function ShippingForm() {\n  const { toast } = useToast();\n\n  const { data: campaigns } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    reset,\n  } = useForm<ShippingFormData>({\n    resolver: zodResolver(shippingSchema),\n  });\n\n  const createShippingMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/shipping-records\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shipping-records\"] });\n      toast({\n        title: \"발송 등록 완료\",\n        description: \"발송 정보가 성공적으로 등록되었습니다.\",\n      });\n      reset();\n    },\n    onError: () => {\n      toast({\n        title: \"발송 등록 실패\",\n        description: \"발송 등록 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ShippingFormData) => {\n    createShippingMutation.mutate({\n      ...data,\n      shippingDate: new Date(data.shippingDate).toISOString(),\n    });\n  };\n\n  const handleExcelUpload = (data: any[]) => {\n    // Handle bulk upload\n    console.log(\"Bulk upload data:\", data);\n    toast({\n      title: \"대량 등록\",\n      description: `${data.length}개의 발송 기록이 등록되었습니다.`,\n    });\n  };\n\n  const downloadExcelTemplate = () => {\n    // Create a sample Excel template\n    const template = [\n      {\n        \"캠페인선택\": \"캠페인 ID (숫자)\",\n        \"발송날짜\": \"YYYY-MM-DD\",\n        \"운송장번호\": \"123456789\",\n        \"상품명\": \"샘플 상품명\",\n        \"메모\": \"선택사항\"\n      }\n    ];\n    \n    // In a real app, you would generate and download an actual Excel file\n    toast({\n      title: \"템플릿 다운로드\",\n      description: \"Excel 템플릿이 다운로드됩니다.\",\n    });\n  };\n\n  const activeCampaigns = campaigns?.filter(c => c.status === 'active' || c.status === 'recruiting') || [];\n\n  return (\n    <div className=\"grid md:grid-cols-2 gap-6\">\n      {/* Single Registration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">단일 등록</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"campaignId\">캠페인 선택 *</Label>\n              <Select onValueChange={(value) => setValue(\"campaignId\", parseInt(value))}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"캠페인 선택\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {activeCampaigns.map((campaign) => (\n                    <SelectItem key={campaign.id} value={campaign.id.toString()}>\n                      {campaign.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.campaignId && (\n                <p className=\"text-sm text-red-600 mt-1\">{errors.campaignId.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"shippingDate\">발송날짜 *</Label>\n              <Input\n                id=\"shippingDate\"\n                {...register(\"shippingDate\")}\n                type=\"date\"\n              />\n              {errors.shippingDate && (\n                <p className=\"text-sm text-red-600 mt-1\">{errors.shippingDate.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"trackingNumber\">운송장 번호 *</Label>\n              <Input\n                id=\"trackingNumber\"\n                {...register(\"trackingNumber\")}\n                placeholder=\"운송장 번호\"\n              />\n              {errors.trackingNumber && (\n                <p className=\"text-sm text-red-600 mt-1\">{errors.trackingNumber.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"productName\">상품명 *</Label>\n              <Input\n                id=\"productName\"\n                {...register(\"productName\")}\n                placeholder=\"상품명\"\n              />\n              {errors.productName && (\n                <p className=\"text-sm text-red-600 mt-1\">{errors.productName.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"memo\">메모</Label>\n              <Textarea\n                id=\"memo\"\n                {...register(\"memo\")}\n                placeholder=\"메모\"\n                rows={2}\n              />\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={createShippingMutation.isPending}\n            >\n              {createShippingMutation.isPending ? \"등록 중...\" : \"등록하기\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Bulk Registration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">대량 등록 (Excel)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <ExcelUpload onUpload={handleExcelUpload} />\n            \n            <div className=\"pt-3 border-t\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={downloadExcelTemplate}\n                className=\"w-full\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Excel 템플릿 다운로드\n              </Button>\n              <p className=\"text-xs text-gray-500 mt-2\">\n                템플릿 파일을 다운로드하여 양식에 맞게 작성 후 업로드해주세요.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7080},"client/src/components/layout/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { User, LogOut } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { User as UserType } from \"@/types\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function Header() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const { data: authData, isLoading } = useQuery<{ user: UserType }>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/auth/logout\"),\n    onSuccess: () => {\n      queryClient.clear(); // Clear all cached data\n      navigate(\"/\");\n      toast({\n        title: \"로그아웃 완료\",\n        description: \"성공적으로 로그아웃되었습니다.\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-8\">\n            <div className=\"flex items-center cursor-pointer\" onClick={() => navigate(\"/\")}>\n              <div className=\"flex-shrink-0\">\n                <h1 className=\"text-2xl font-bold text-primary\">올리뷰</h1>\n                <p className=\"text-xs text-gray-500\">AllReview Platform</p>\n              </div>\n            </div>\n            \n            {/* Navigation Menu */}\n            <nav className=\"hidden md:flex space-x-6\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => navigate(\"/\")}\n                className=\"text-gray-600 hover:text-primary\"\n              >\n                홈\n              </Button>\n              {authData?.user && (\n                <>\n                  <Button \n                    variant=\"ghost\" \n                    onClick={() => navigate(\"/dashboard\")}\n                    className=\"text-gray-600 hover:text-primary\"\n                  >\n                    대시보드\n                  </Button>\n                  <Button \n                    variant=\"ghost\" \n                    onClick={() => navigate(\"/dashboard/campaigns\")}\n                    className=\"text-gray-600 hover:text-primary\"\n                  >\n                    캠페인\n                  </Button>\n                  <Button \n                    variant=\"ghost\" \n                    onClick={() => navigate(\"/dashboard/analytics\")}\n                    className=\"text-gray-600 hover:text-primary\"\n                  >\n                    분석\n                  </Button>\n                  <Button \n                    variant=\"ghost\" \n                    onClick={() => navigate(\"/dashboard/billing\")}\n                    className=\"text-gray-600 hover:text-primary\"\n                  >\n                    결제\n                  </Button>\n                  {authData.user.role === 'admin' && (\n                    <Button \n                      variant=\"ghost\" \n                      onClick={() => navigate(\"/dashboard/settings\")}\n                      className=\"text-gray-600 hover:text-primary\"\n                    >\n                      설정\n                    </Button>\n                  )}\n                </>\n              )}\n            </nav>\n          </div>\n\n          {authData?.user ? (\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <User className=\"h-5 w-5 text-gray-600\" />\n                <div className=\"text-sm\">\n                  <div className=\"font-medium text-gray-900\">\n                    {authData.user.role === 'partner' && authData.user.companyName \n                      ? `파트너 : ${authData.user.companyName}`\n                      : authData.user.companyName || authData.user.email\n                    }\n                  </div>\n                  <div className=\"text-gray-500 capitalize\">\n                    {authData.user.role === 'admin' ? '관리자' : \n                     authData.user.role === 'advertiser' ? '광고주' : '파트너'}\n                  </div>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                disabled={logoutMutation.isPending}\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                로그아웃\n              </Button>\n            </div>\n          ) : (\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" onClick={() => navigate(\"/login\")}>\n                로그인\n              </Button>\n              <Button onClick={() => navigate(\"/login\")}>\n                회원가입\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":5146},"client/src/components/layout/Sidebar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { \n  LayoutDashboard, \n  Megaphone, \n  BarChart3, \n  CreditCard,\n  Package,\n  Truck,\n  FileText,\n  TrendingUp,\n  Users,\n  Settings\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { User } from \"@/types\";\n\ninterface SidebarProps {\n  user: User;\n}\n\nexport default function Sidebar({ user }: SidebarProps) {\n  const [location] = useLocation();\n\n  const getMenuItems = () => {\n    switch (user.role) {\n      case 'admin':\n        return [\n          { href: '/dashboard', icon: LayoutDashboard, label: '대시보드' },\n          { href: '/dashboard/campaigns', icon: Megaphone, label: '캠페인 관리' },\n          { href: '/dashboard/partners', icon: Users, label: '파트너 관리' },\n          { href: '/dashboard/analytics', icon: BarChart3, label: '성과 분석' },\n          { href: '/dashboard/billing', icon: CreditCard, label: '정산 관리' },\n          { href: '/dashboard/settings', icon: Settings, label: '설정' },\n        ];\n      case 'advertiser':\n        return [\n          { href: '/dashboard', icon: LayoutDashboard, label: '대시보드' },\n          { href: '/dashboard/campaigns', icon: Megaphone, label: '캠페인' },\n          { href: '/dashboard/analytics', icon: BarChart3, label: '분석' },\n          { href: '/dashboard/billing', icon: CreditCard, label: '결제' },\n        ];\n      case 'partner':\n        return [\n          { href: '/dashboard', icon: LayoutDashboard, label: '대시보드' },\n          { href: '/dashboard/samples', icon: Package, label: '샘플업체' },\n          { href: '/dashboard/shipping', icon: Truck, label: '발송계획' },\n          { href: '/dashboard/records', icon: FileText, label: '발송등록' },\n          { href: '/dashboard/revenue', icon: TrendingUp, label: '수익리포트' },\n        ];\n      default:\n        return [];\n    }\n  };\n\n  const menuItems = getMenuItems();\n\n  return (\n    <div className=\"w-64 bg-white shadow-sm border-r min-h-screen\">\n      <div className=\"p-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900 mb-6\">\n          {user.role === 'admin' ? '관리자 메뉴' : \n           user.role === 'advertiser' ? '광고주 메뉴' : '파트너 메뉴'}\n        </h2>\n        \n        <nav className=\"space-y-2\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href || location.startsWith(item.href + '/');\n            \n            return (\n              <Link key={item.href} href={item.href}>\n                <div className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors cursor-pointer\",\n                  isActive \n                    ? \"bg-primary text-white\" \n                    : \"text-gray-700 hover:bg-gray-100\"\n                )}>\n                  <Icon className=\"h-5 w-5\" />\n                  <span>{item.label}</span>\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3062},"client/src/components/tables/CampaignTable.tsx":{"content":"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Campaign } from \"@/types\";\nimport { Eye, Edit, Trash2 } from \"lucide-react\";\n\ninterface CampaignTableProps {\n  campaigns: Campaign[];\n  onView?: (campaign: Campaign) => void;\n  onEdit?: (campaign: Campaign) => void;\n  onDelete?: (campaign: Campaign) => void;\n  showActions?: boolean;\n}\n\nexport default function CampaignTable({ \n  campaigns, \n  onView, \n  onEdit, \n  onDelete, \n  showActions = true \n}: CampaignTableProps) {\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      recruiting: { label: \"모집중\", variant: \"secondary\" as const },\n      active: { label: \"진행중\", variant: \"default\" as const },\n      completed: { label: \"완료\", variant: \"outline\" as const },\n      cancelled: { label: \"취소\", variant: \"destructive\" as const },\n      draft: { label: \"임시저장\", variant: \"secondary\" as const },\n    };\n    return statusMap[status as keyof typeof statusMap] || { label: status, variant: \"secondary\" as const };\n  };\n\n  if (!campaigns || campaigns.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-gray-500\">등록된 캠페인이 없습니다.</p>\n      </div>\n    );\n  }\n\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHead>캠페인명</TableHead>\n          <TableHead>카테고리</TableHead>\n          <TableHead>상태</TableHead>\n          <TableHead>예산</TableHead>\n          <TableHead>모집마감일</TableHead>\n          {showActions && <TableHead>관리</TableHead>}\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {campaigns.map((campaign) => {\n          const statusInfo = getStatusBadge(campaign.status);\n          return (\n            <TableRow key={campaign.id}>\n              <TableCell className=\"font-medium\">{campaign.title}</TableCell>\n              <TableCell>{campaign.category}</TableCell>\n              <TableCell>\n                <Badge variant={statusInfo.variant}>{statusInfo.label}</Badge>\n              </TableCell>\n              <TableCell>₩ {Number(campaign.totalBudget).toLocaleString()}</TableCell>\n              <TableCell>\n                {new Date(campaign.recruitmentEndDate).toLocaleDateString()}\n              </TableCell>\n              {showActions && (\n                <TableCell>\n                  <div className=\"flex items-center space-x-2\">\n                    {onView && (\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => onView(campaign)}>\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    {onEdit && (\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => onEdit(campaign)}>\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    {onDelete && (\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => onDelete(campaign)}>\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                </TableCell>\n              )}\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n","size_bytes":3403},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/excel-upload.tsx":{"content":"import { useCallback, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Upload, FileSpreadsheet } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ExcelUploadProps {\n  onUpload: (data: any[]) => void;\n  accept?: string;\n  maxSize?: number; // in MB\n}\n\nexport default function ExcelUpload({ \n  onUpload, \n  accept = \".xlsx,.xls,.csv\",\n  maxSize = 10 \n}: ExcelUploadProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const { toast } = useToast();\n\n  const handleFile = useCallback(async (file: File) => {\n    if (!file) return;\n\n    // Validate file type\n    const validTypes = [\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx\n      'application/vnd.ms-excel', // .xls\n      'text/csv' // .csv\n    ];\n\n    if (!validTypes.includes(file.type) && !file.name.match(/\\.(xlsx|xls|csv)$/i)) {\n      toast({\n        title: \"잘못된 파일 형식\",\n        description: \"Excel 파일(.xlsx, .xls) 또는 CSV 파일만 업로드 가능합니다.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size\n    if (file.size > maxSize * 1024 * 1024) {\n      toast({\n        title: \"파일 크기 초과\",\n        description: `파일 크기는 ${maxSize}MB 이하여야 합니다.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      // For demonstration purposes, we'll simulate parsing\n      // In a real application, you would use a library like SheetJS (xlsx) to parse the file\n      \n      // Simulate async file processing\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock parsed data - in reality, this would come from parsing the Excel file\n      const mockData = [\n        {\n          campaignId: 1,\n          shippingDate: \"2024-01-15\",\n          trackingNumber: \"123456789\",\n          productName: \"샘플 상품 1\",\n          memo: \"테스트 메모\"\n        },\n        {\n          campaignId: 1,\n          shippingDate: \"2024-01-16\",\n          trackingNumber: \"987654321\",\n          productName: \"샘플 상품 2\",\n          memo: \"\"\n        }\n      ];\n\n      onUpload(mockData);\n      \n      toast({\n        title: \"파일 업로드 완료\",\n        description: `${mockData.length}개의 레코드가 처리되었습니다.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"파일 처리 실패\",\n        description: \"파일을 처리하는 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  }, [onUpload, maxSize, toast]);\n\n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    if (files.length > 0) {\n      handleFile(files[0]);\n    }\n  }, [handleFile]);\n\n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  }, []);\n\n  const handleFileInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFile(files[0]);\n    }\n  }, [handleFile]);\n\n  return (\n    <div\n      className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${\n        isDragging\n          ? \"border-primary bg-primary/5\"\n          : \"border-gray-300 hover:border-gray-400\"\n      }`}\n      onDrop={handleDrop}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n    >\n      <input\n        type=\"file\"\n        accept={accept}\n        onChange={handleFileInput}\n        className=\"hidden\"\n        id=\"excel-upload\"\n        disabled={isUploading}\n      />\n      \n      <div className=\"space-y-3\">\n        {isUploading ? (\n          <>\n            <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\"></div>\n            <p className=\"text-sm text-gray-600\">파일을 처리하는 중...</p>\n          </>\n        ) : (\n          <>\n            <FileSpreadsheet className=\"h-12 w-12 text-gray-400 mx-auto\" />\n            <div>\n              <p className=\"text-sm text-gray-600 mb-2\">\n                Excel 파일을 드래그하거나 클릭하여 업로드\n              </p>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => document.getElementById(\"excel-upload\")?.click()}\n              >\n                <Upload className=\"h-4 w-4 mr-2\" />\n                파일 선택\n              </Button>\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              지원 형식: .xlsx, .xls, .csv (최대 {maxSize}MB)\n            </p>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5055},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/PartnersPage.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Users, Search, Filter, UserCheck, UserX, Mail, Building2 } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface Partner {\n  id: number;\n  email: string;\n  companyName: string;\n  role: string;\n  createdAt: string;\n  isActive?: boolean;\n  totalCampaigns?: number;\n  totalEarnings?: number;\n}\n\nexport default function PartnersPage() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n\n  const { data: partners, isLoading } = useQuery<Partner[]>({\n    queryKey: [\"/api/partners\"],\n  });\n\n  const updatePartnerStatusMutation = useMutation({\n    mutationFn: async ({ partnerId, isActive }: { partnerId: number; isActive: boolean }) => {\n      const response = await fetch(`/api/partners/${partnerId}/status`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isActive })\n      });\n      if (!response.ok) throw new Error('Failed to update partner status');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/partners\"] });\n    }\n  });\n\n  const filteredPartners = partners?.filter(partner => {\n    const matchesSearch = partner.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         partner.companyName?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || \n                         (statusFilter === 'active' && partner.isActive) ||\n                         (statusFilter === 'inactive' && !partner.isActive);\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const getStatusStats = () => {\n    if (!partners) return { total: 0, active: 0, inactive: 0 };\n    \n    return {\n      total: partners.length,\n      active: partners.filter(p => p.isActive).length,\n      inactive: partners.filter(p => !p.isActive).length,\n    };\n  };\n\n  const stats = getStatusStats();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-500\">데이터를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">파트너 관리</h1>\n          <p className=\"text-gray-500\">등록된 파트너들을 관리하고 상태를 모니터링합니다</p>\n        </div>\n        <Button className=\"flex items-center gap-2\">\n          <Users className=\"h-4 w-4\" />\n          파트너 초대\n        </Button>\n      </div>\n\n      {/* Status Cards */}\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">전체 파트너</CardTitle>\n            <Users className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.total}</div>\n            <p className=\"text-xs text-gray-500 mt-1\">등록된 파트너</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">활성 파트너</CardTitle>\n            <UserCheck className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.active}</div>\n            <p className=\"text-xs text-gray-500 mt-1\">활성 상태</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">비활성 파트너</CardTitle>\n            <UserX className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{stats.inactive}</div>\n            <p className=\"text-xs text-gray-500 mt-1\">비활성 상태</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search and Filter */}\n      <Card>\n        <CardHeader>\n          <CardTitle>파트너 검색</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"search\">검색</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"이메일 또는 회사명으로 검색\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"w-48\">\n              <Label htmlFor=\"status\">상태 필터</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"전체 상태\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">전체 상태</SelectItem>\n                  <SelectItem value=\"active\">활성</SelectItem>\n                  <SelectItem value=\"inactive\">비활성</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Partners List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>파트너 목록</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {filteredPartners.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">\n                {searchTerm || statusFilter !== 'all' ? '검색 조건에 맞는 파트너가 없습니다.' : '등록된 파트너가 없습니다.'}\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredPartners.map((partner) => (\n                <div key={partner.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <Mail className=\"h-4 w-4 text-gray-400\" />\n                          <span className=\"font-medium text-gray-900\">{partner.email}</span>\n                        </div>\n                        <Badge variant={partner.isActive ? \"default\" : \"secondary\"}>\n                          {partner.isActive ? \"활성\" : \"비활성\"}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"mt-2 grid grid-cols-2 gap-4 text-sm text-gray-600\">\n                        <div className=\"flex items-center gap-2\">\n                          <Building2 className=\"h-4 w-4\" />\n                          <span>{partner.companyName || '회사명 없음'}</span>\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">가입일:</span> {new Date(partner.createdAt).toLocaleDateString()}\n                        </div>\n                      </div>\n                      \n                      {(partner.totalCampaigns || partner.totalEarnings) && (\n                        <div className=\"mt-2 grid grid-cols-2 gap-4 text-sm text-gray-600\">\n                          <div>\n                            <span className=\"font-medium\">참여 캠페인:</span> {partner.totalCampaigns || 0}개\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">총 수익:</span> ₩{(partner.totalEarnings || 0).toLocaleString()}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        상세보기\n                      </Button>\n                      <Button \n                        size=\"sm\"\n                        variant={partner.isActive ? \"destructive\" : \"default\"}\n                        onClick={() => updatePartnerStatusMutation.mutate({\n                          partnerId: partner.id,\n                          isActive: !partner.isActive\n                        })}\n                        disabled={updatePartnerStatusMutation.isPending}\n                      >\n                        {partner.isActive ? \"비활성화\" : \"활성화\"}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9907}}}